{
    "info": {
        "description": "Includes all resources, schema and data",
        "name": "Complete BrAPI test",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "description": "Check the available calls on a server",
            "item": [
                {
                    "description": "Implementation Notes\n\nHaving a consistent structure for the path string of each call is very \nimportant for teams to be able to connect and find errors. Read more on Github.\n\nHere are the rules for the path of each call that should be returned\n\nEvery word in the call path should match the documentation exactly, both in \nspelling and capitalization. Note that path strings are all lower case, but \npath parameters are camel case.\n\nEach path should start relative to \\\"/\\\" and therefore should not include \\\"/\\\"\n\nNo leading or trailing slashes (\\\"/\\\") \n\nPath parameters are wrapped in curly braces (\\\"{}\\\"). The name of the path parameter \nshould be spelled exactly as it is specified in the documentation.\n\nExamples \n\nGOOD   \"call\": \"germplasm/{germplasmDbId}/pedigree\" \n\nBAD    \"call\": \"germplasm/{id}/pedigree\"\n\nBAD    \"call\": \"germplasm/{germplasmDBid}/pedigree\" \n\nBAD    \"call\": \"brapi/v2/germplasm/{germplasmDbId}/pedigree\" \n\nBAD    \"call\": \"/germplasm/{germplasmDbId}/pedigree/\" \n\nBAD    \"call\": \"germplasm/<germplasmDbId>/pedigree\"",
                    "endpoint": "/serverinfo",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ServerInfo/getServerinfoResponse",
                                "SaveCalls:V2"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /serverinfo",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/serverinfo"
                    },
                    "requires": []
                }
            ],
            "name": "Server Info"
        },
        {
            "description": "Information about Common Crop Names",
            "item": [
                {
                    "description": "List the common crop names for the crops available in a database server. \n\nThis call is ** required ** for multi-crop systems where data from multiple \ncrops may be stored in the same database server. A distinct database server \nis defined by everything in the URL before \"/brapi/v2\", including host \nname and base path.\n\nThis call is recommended for single crop systems to be compatible with \nmulti-crop clients. For a single crop system the response should contain \nan array with exactly 1 element. \n\nThe common crop name can be used as a search parameter for Programs, \nStudies, and Germplasm.",
                    "endpoint": "/commoncropnames",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CommonCropNames/getCommoncropnamesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /commoncropnames",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/commoncropnames"
                    },
                    "requires": []
                }
            ],
            "name": "Common Crop Names"
        },
        {
            "description": "Information about Programs",
            "item": [
                {
                    "description": "Get a filtered list of breeding Programs. This list can be filtered by common crop name to narrow results to a specific crop.",
                    "endpoint": "/programs",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Programs/getProgramsResponse",
                                "GetValue:/result/data/0/programDbId:programDbId0",
                                "GetValue:/result/data/1/programDbId:programDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /programs",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/programs"
                    },
                    "requires": []
                },
                {
                    "description": "Get a single breeding Program by Id. This can be used to quickly get the details of a Program when you have the Id from another entity.",
                    "endpoint": "/programs/{programDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Programs/getProgramsProgramdbidResponse",
                                "IsEqual:/result/programDbId:programDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /programs/{programDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/programs/{programDbId0}"
                    },
                    "requires": [
                        "programDbId0"
                    ]
                },
                {
                    "description": "Get a single breeding Program by Id. This can be used to quickly get the details of a Program when you have the Id from another entity.",
                    "endpoint": "/programs/{programDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Programs/getProgramsProgramdbidResponse",
                                "IsEqual:/result/programDbId:programDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /programs/{programDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/programs/{programDbId1}"
                    },
                    "requires": [
                        "programDbId1"
                    ]
                },
                {
                    "description": "Add new breeding Programs to the database. The `programDbId` is set by the server, all other fields are take from the request body, or a default value is used.",
                    "endpoint": "/programs",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Programs/postProgramsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /programs",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/programs"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of an existing breeding Program.",
                    "endpoint": "/programs/{programDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Programs/putProgramsProgramdbidResponse",
                                "IsEqual:/result/programDbId:programDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /programs/{programDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/programs/{programDbId0}"
                    },
                    "requires": [
                        "programDbId0"
                    ]
                },
                {
                    "description": "Advanced searching for the programs resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/programs",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Programs/postSearchProgramsResponse:programsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/programs",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/programs"
                    },
                    "requires": []
                },
                {
                    "description": "Advanced searching for the programs resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/programs/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Programs/getSearchProgramsSearchresultsdbidResponse:programsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/programs/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/programs/{programsSearchResultDbId}"
                    },
                    "requires": [
                        "programsSearchResultDbId"
                    ]
                }
            ],
            "name": "Programs"
        },
        {
            "description": "Information about Trials",
            "item": [
                {
                    "description": "Retrieve a filtered list of breeding Trials. A Trial is a collection of Studies",
                    "endpoint": "/trials",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Trials/getTrialsResponse",
                                "GetValue:/result/data/0/trialDbId:trialDbId0",
                                "GetValue:/result/data/1/trialDbId:trialDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /trials",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/trials"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific Trial",
                    "endpoint": "/trials/{trialDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Trials/getTrialsTrialdbidResponse",
                                "IsEqual:/result/trialDbId:trialDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /trials/{trialDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/trials/{trialDbId0}"
                    },
                    "requires": [
                        "trialDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific Trial",
                    "endpoint": "/trials/{trialDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Trials/getTrialsTrialdbidResponse",
                                "IsEqual:/result/trialDbId:trialDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /trials/{trialDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/trials/{trialDbId1}"
                    },
                    "requires": [
                        "trialDbId1"
                    ]
                },
                {
                    "description": "Create new breeding Trials. A Trial represents a collection of related Studies. `trialDbId` is generated by the server.",
                    "endpoint": "/trials",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Trials/postTrialsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /trials",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/trials"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of an existing Trial",
                    "endpoint": "/trials/{trialDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Trials/putTrialsTrialdbidResponse",
                                "IsEqual:/result/trialDbId:trialDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /trials/{trialDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/trials/{trialDbId0}"
                    },
                    "requires": [
                        "trialDbId0"
                    ]
                },
                {
                    "description": "Advanced searching for the programs resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/trials",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Trials/postSearchTrialsResponse:trialsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/trials",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/trials"
                    },
                    "requires": []
                },
                {
                    "description": "Advanced searching for the trials resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/trials/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Trials/getSearchTrialsSearchresultsdbidResponse:trialsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/trials/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/trials/{trialsSearchResultDbId}"
                    },
                    "requires": [
                        "trialsSearchResultDbId"
                    ]
                }
            ],
            "name": "Trials"
        },
        {
            "description": "Information about Studies",
            "item": [
                {
                    "description": "Get list of studies\n\nStartDate and endDate should be ISO-8601 format for dates",
                    "endpoint": "/studies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Studies/getStudiesResponse",
                                "GetValue:/result/data/0/studyDbId:studyDbId0",
                                "GetValue:/result/data/1/studyDbId:studyDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve the information of the study required for field data collection\n\nAn additionalInfo field was added to provide a controlled vocabulary for less common data fields.",
                    "endpoint": "/studies/{studyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Studies/getStudiesStudydbidResponse",
                                "IsEqual:/result/studyDbId:studyDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId0}"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Retrieve the information of the study required for field data collection\n\nAn additionalInfo field was added to provide a controlled vocabulary for less common data fields.",
                    "endpoint": "/studies/{studyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Studies/getStudiesStudydbidResponse",
                                "IsEqual:/result/studyDbId:studyDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId1}"
                    },
                    "requires": [
                        "studyDbId1"
                    ]
                },
                {
                    "description": "Call to retrieve the list of study types.",
                    "endpoint": "/studytypes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Studies/getStudytypesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studytypes",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studytypes"
                    },
                    "requires": []
                },
                {
                    "description": "Create new studies\n\nImplementation Notes\n\nStartDate and endDate should be ISO-8601 format for dates\n\n`studDbId` is generated by the server.",
                    "endpoint": "/studies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Studies/postStudiesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /studies",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/studies"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Study with new data",
                    "endpoint": "/studies/{studyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Studies/putStudiesStudydbidResponse",
                                "IsEqual:/result/studyDbId:studyDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /studies/{studyDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/studies/{studyDbId0}"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Get list of studies\nStartDate and endDate should be ISO-8601 format for dates\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/studies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Studies/postSearchStudiesResponse:studiesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/studies",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/studies"
                    },
                    "requires": []
                },
                {
                    "description": "Get list of studies\n\nStartDate and endDate should be ISO-8601 format for dates\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/studies/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Studies/getSearchStudiesSearchresultsdbidResponse:studiesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/studies/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/studies/{studiesSearchResultDbId}"
                    },
                    "requires": [
                        "studiesSearchResultDbId"
                    ]
                }
            ],
            "name": "Studies"
        },
        {
            "description": "Information about Locations",
            "item": [
                {
                    "description": "Get a list of locations.\n* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n* `altitude` is in meters.",
                    "endpoint": "/locations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Locations/getLocationsResponse",
                                "GetValue:/result/data/0/locationDbId:locationDbId0",
                                "GetValue:/result/data/1/locationDbId:locationDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /locations",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/locations"
                    },
                    "requires": []
                },
                {
                    "description": "Get details for a location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
                    "endpoint": "/locations/{locationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Locations/getLocationsLocationdbidResponse",
                                "IsEqual:/result/locationDbId:locationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /locations/{locationDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/locations/{locationDbId0}"
                    },
                    "requires": [
                        "locationDbId0"
                    ]
                },
                {
                    "description": "Get details for a location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
                    "endpoint": "/locations/{locationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Locations/getLocationsLocationdbidResponse",
                                "IsEqual:/result/locationDbId:locationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /locations/{locationDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/locations/{locationDbId1}"
                    },
                    "requires": [
                        "locationDbId1"
                    ]
                },
                {
                    "description": "Add new locations to database\n* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n* `altitude` is in meters.",
                    "endpoint": "/locations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Locations/postLocationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /locations",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/locations"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details for an existing location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
                    "endpoint": "/locations/{locationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Locations/putLocationsLocationdbidResponse",
                                "IsEqual:/result/locationDbId:locationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /locations/{locationDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/locations/{locationDbId0}"
                    },
                    "requires": [
                        "locationDbId0"
                    ]
                },
                {
                    "description": "Advanced searching for the locations resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/locations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Locations/postSearchLocationsResponse:locationsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/locations",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/locations"
                    },
                    "requires": []
                },
                {
                    "description": "Advanced searching for the locations resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/locations/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Locations/getSearchLocationsSearchresultsdbidResponse:locationsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/locations/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/locations/{locationsSearchResultDbId}"
                    },
                    "requires": [
                        "locationsSearchResultDbId"
                    ]
                }
            ],
            "name": "Locations"
        },
        {
            "description": "Information about Seasons",
            "item": [
                {
                    "description": "Call to retrieve all seasons in the database.\n\nA season is made of 2 parts; the primary year and a term which defines a segment of the year. \nThis could be a traditional season, like \"Spring\" or \"Summer\" or this could be a month, like \n\"May\" or \"June\" or this could be an arbitrary season name which is meaningful to the breeding \nprogram like \"PlantingTime_3\" or \"Season E\"",
                    "endpoint": "/seasons",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Seasons/getSeasonsResponse",
                                "GetValue:/result/data/0/seasonDbId:seasonDbId0",
                                "GetValue:/result/data/1/seasonDbId:seasonDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seasons",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seasons"
                    },
                    "requires": []
                },
                {
                    "description": "Get the a single Season",
                    "endpoint": "/seasons/{seasonDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Seasons/getSeasonsSeasondbidResponse",
                                "IsEqual:/result/seasonDbId:seasonDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seasons/{seasonDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seasons/{seasonDbId0}"
                    },
                    "requires": [
                        "seasonDbId0"
                    ]
                },
                {
                    "description": "Get the a single Season",
                    "endpoint": "/seasons/{seasonDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Seasons/getSeasonsSeasondbidResponse",
                                "IsEqual:/result/seasonDbId:seasonDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seasons/{seasonDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seasons/{seasonDbId1}"
                    },
                    "requires": [
                        "seasonDbId1"
                    ]
                },
                {
                    "description": "Add new season entries to the database",
                    "endpoint": "/seasons",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Seasons/postSeasonsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /seasons",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/seasons"
                    },
                    "requires": []
                },
                {
                    "description": "Update existing Seasons",
                    "endpoint": "/seasons/{seasonDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Seasons/putSeasonsSeasondbidResponse",
                                "IsEqual:/result/seasonDbId:seasonDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /seasons/{seasonDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/seasons/{seasonDbId0}"
                    },
                    "requires": [
                        "seasonDbId0"
                    ]
                }
            ],
            "name": "Seasons"
        },
        {
            "description": "Information about People",
            "item": [
                {
                    "description": "Get filtered list of people",
                    "endpoint": "/people",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/People/getPeopleResponse",
                                "GetValue:/result/data/0/personDbId:personDbId0",
                                "GetValue:/result/data/1/personDbId:personDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /people",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/people"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details for a specific Person",
                    "endpoint": "/people/{personDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/People/getPeoplePersondbidResponse",
                                "IsEqual:/result/personDbId:personDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /people/{personDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/people/{personDbId0}"
                    },
                    "requires": [
                        "personDbId0"
                    ]
                },
                {
                    "description": "Get the details for a specific Person",
                    "endpoint": "/people/{personDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/People/getPeoplePersondbidResponse",
                                "IsEqual:/result/personDbId:personDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /people/{personDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/people/{personDbId1}"
                    },
                    "requires": [
                        "personDbId1"
                    ]
                },
                {
                    "description": "Create new People entities. `personDbId` is generated and managed by the server.",
                    "endpoint": "/people",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/People/postPeopleResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /people",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/people"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Person",
                    "endpoint": "/people/{personDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/People/putPeoplePersondbidResponse",
                                "IsEqual:/result/personDbId:personDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /people/{personDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/people/{personDbId0}"
                    },
                    "requires": [
                        "personDbId0"
                    ]
                },
                {
                    "description": "Advanced searching for the programs resource.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/people",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/People/postSearchPeopleResponse:peopleSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/people",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/people"
                    },
                    "requires": []
                },
                {
                    "description": "Advanced searching for the people resource.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/people/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/People/getSearchPeopleSearchresultsdbidResponse:peopleSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/people/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/people/{peopleSearchResultDbId}"
                    },
                    "requires": [
                        "peopleSearchResultDbId"
                    ]
                }
            ],
            "name": "People"
        },
        {
            "description": "Information about Lists",
            "item": [
                {
                    "description": "Get filtered set of generic lists",
                    "endpoint": "/lists",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Lists/getListsResponse",
                                "GetValue:/result/data/0/listDbId:listDbId0",
                                "GetValue:/result/data/1/listDbId:listDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /lists",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/lists"
                    },
                    "requires": []
                },
                {
                    "description": "Get a specific generic lists",
                    "endpoint": "/lists/{listDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Lists/getListsListdbidResponse",
                                "IsEqual:/result/listDbId:listDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /lists/{listDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/lists/{listDbId0}"
                    },
                    "requires": [
                        "listDbId0"
                    ]
                },
                {
                    "description": "Get a specific generic lists",
                    "endpoint": "/lists/{listDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Lists/getListsListdbidResponse",
                                "IsEqual:/result/listDbId:listDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /lists/{listDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/lists/{listDbId1}"
                    },
                    "requires": [
                        "listDbId1"
                    ]
                },
                {
                    "description": "Create a new list",
                    "endpoint": "/lists",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Lists/postListsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /lists",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/lists"
                    },
                    "requires": []
                },
                {
                    "description": "Add new data to a specific generic lists",
                    "endpoint": "/lists/{listDbId}/items",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Lists/postListsListdbidItemsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /lists/{listDbId}/items",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/lists/{listDbId0}/items"
                    },
                    "requires": [
                        "listDbId0"
                    ]
                },
                {
                    "description": "Update an existing generic list",
                    "endpoint": "/lists/{listDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Lists/putListsListdbidResponse",
                                "IsEqual:/result/listDbId:listDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /lists/{listDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/lists/{listDbId0}"
                    },
                    "requires": [
                        "listDbId0"
                    ]
                },
                {
                    "description": "Advanced searching for the list resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/lists",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Lists/postSearchListsResponse:listsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/lists",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/lists"
                    },
                    "requires": []
                },
                {
                    "description": "Advanced searching for the list resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/lists/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Lists/getSearchListsSearchresultsdbidResponse:listsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/lists/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/lists/{listsSearchResultDbId}"
                    },
                    "requires": [
                        "listsSearchResultDbId"
                    ]
                }
            ],
            "name": "Lists"
        },
        {
            "description": "Information about Germplasm",
            "item": [
                {
                    "description": "Get the list of germplasm breeding methods available in a system.",
                    "endpoint": "/breedingmethods",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/getBreedingmethodsResponse",
                                "GetValue:/result/data/0/breedingMethodDbId:breedingMethodDbId0",
                                "GetValue:/result/data/1/breedingMethodDbId:breedingMethodDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /breedingmethods",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/breedingmethods"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific Breeding Method used to produce Germplasm",
                    "endpoint": "/breedingmethods/{breedingMethodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/getBreedingmethodsBreedingmethoddbidResponse",
                                "IsEqual:/result/breedingMethodDbId:breedingMethodDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /breedingmethods/{breedingMethodDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/breedingmethods/{breedingMethodDbId0}"
                    },
                    "requires": [
                        "breedingMethodDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific Breeding Method used to produce Germplasm",
                    "endpoint": "/breedingmethods/{breedingMethodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/getBreedingmethodsBreedingmethoddbidResponse",
                                "IsEqual:/result/breedingMethodDbId:breedingMethodDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /breedingmethods/{breedingMethodDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/breedingmethods/{breedingMethodDbId1}"
                    },
                    "requires": [
                        "breedingMethodDbId1"
                    ]
                },
                {
                    "description": "Addresses these needs\n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId",
                    "endpoint": "/germplasm",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/getGermplasmResponse",
                                "GetValue:/result/data/0/germplasmDbId:germplasmDbId0",
                                "GetValue:/result/data/1/germplasmDbId:germplasmDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm"
                    },
                    "requires": []
                },
                {
                    "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
                    "endpoint": "/germplasm/{germplasmDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/getGermplasmGermplasmdbidResponse",
                                "IsEqual:/result/germplasmDbId:germplasmDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
                    "endpoint": "/germplasm/{germplasmDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/getGermplasmGermplasmdbidResponse",
                                "IsEqual:/result/germplasmDbId:germplasmDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId1}"
                    },
                    "requires": [
                        "germplasmDbId1"
                    ]
                },
                {
                    "description": "Get all MCPD details of a germplasm\n\n<a target=\"_blank\" href=\"https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\"> MCPD v2.1 spec can be found here </a>\n\nImplementation Notes\n\n- When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.",
                    "endpoint": "/germplasm/{germplasmDbId}/mcpd",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/getGermplasmGermplasmdbidMcpdResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}/mcpd",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}/mcpd"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Get the parentage information of a specific Germplasm",
                    "endpoint": "/germplasm/{germplasmDbId}/pedigree",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/getGermplasmGermplasmdbidPedigreeResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}/pedigree",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}/pedigree"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Get the germplasmDbIds for all the Progeny of a particular germplasm.\n\nImplementation Notes\n\n- Regarding the ''parentType'' field in the progeny object. Given a germplasm A having a progeny B and C, ''parentType'' for progeny B refers to the ''parentType'' of A toward B.",
                    "endpoint": "/germplasm/{germplasmDbId}/progeny",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/getGermplasmGermplasmdbidProgenyResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}/progeny",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}/progeny"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Create new Germplasm entities on this server",
                    "endpoint": "/germplasm",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/postGermplasmResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /germplasm",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/germplasm"
                    },
                    "requires": []
                },
                {
                    "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
                    "endpoint": "/germplasm/{germplasmDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Germplasm/putGermplasmGermplasmdbidResponse",
                                "IsEqual:/result/germplasmDbId:germplasmDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /germplasm/{germplasmDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Search for a set of germplasm based on some criteria\n\nAddresses these needs \n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/germplasm",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Germplasm/postSearchGermplasmResponse:germplasmSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/germplasm",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/germplasm"
                    },
                    "requires": []
                },
                {
                    "description": "See Search Services for additional implementation details.\n\nAddresses these needs: \n\n1. General germplasm search mechanism that accepts POST for complex queries \n\n2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n3. possibility to get MCPD details by PUID rather than dbId",
                    "endpoint": "/search/germplasm/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Germplasm/getSearchGermplasmSearchresultsdbidResponse:germplasmSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/germplasm/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/germplasm/{germplasmSearchResultDbId}"
                    },
                    "requires": [
                        "germplasmSearchResultDbId"
                    ]
                }
            ],
            "name": "Germplasm"
        },
        {
            "description": "Information about Germplasm Attributes",
            "item": [
                {
                    "description": "List available attributes.",
                    "endpoint": "/attributes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributes/getAttributesResponse",
                                "GetValue:/result/data/0/attributeDbId:attributeDbId0",
                                "GetValue:/result/data/1/attributeDbId:attributeDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes"
                    },
                    "requires": []
                },
                {
                    "description": "List all available attribute categories.",
                    "endpoint": "/attributes/categories",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributes/getAttributesCategoriesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes/categories",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes/categories"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details for a specific Germplasm Attribute",
                    "endpoint": "/attributes/{attributeDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributes/getAttributesAttributedbidResponse",
                                "IsEqual:/result/attributeDbId:attributeDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes/{attributeDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes/{attributeDbId0}"
                    },
                    "requires": [
                        "attributeDbId0"
                    ]
                },
                {
                    "description": "Get the details for a specific Germplasm Attribute",
                    "endpoint": "/attributes/{attributeDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributes/getAttributesAttributedbidResponse",
                                "IsEqual:/result/attributeDbId:attributeDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes/{attributeDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes/{attributeDbId1}"
                    },
                    "requires": [
                        "attributeDbId1"
                    ]
                },
                {
                    "description": "Create new Germplasm Attributes",
                    "endpoint": "/attributes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributes/postAttributesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /attributes",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/attributes"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Germplasm Attribute",
                    "endpoint": "/attributes/{attributeDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributes/putAttributesAttributedbidResponse",
                                "IsEqual:/result/attributeDbId:attributeDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /attributes/{attributeDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/attributes/{attributeDbId0}"
                    },
                    "requires": [
                        "attributeDbId0"
                    ]
                },
                {
                    "description": "Search for a set of Germplasm Attributes based on some criteria\n        \nSee Search Services for additional implementation details.",
                    "endpoint": "/search/attributes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/GermplasmAttributes/postSearchAttributesResponse:attributesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/attributes",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/attributes"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a Germplasm Attributes search request\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/attributes/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/GermplasmAttributes/getSearchAttributesSearchresultsdbidResponse:attributesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/attributes/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/attributes/{attributesSearchResultDbId}"
                    },
                    "requires": [
                        "attributesSearchResultDbId"
                    ]
                }
            ],
            "name": "Germplasm Attributes"
        },
        {
            "description": "Information about Germplasm Attribute Values",
            "item": [
                {
                    "description": "Get the Germplasm Attribute Values",
                    "endpoint": "/attributevalues",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributeValues/getAttributevaluesResponse",
                                "GetValue:/result/data/0/attributeValueDbId:attributeValueDbId0",
                                "GetValue:/result/data/1/attributeValueDbId:attributeValueDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributevalues",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributevalues"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details for a specific Germplasm Attribute",
                    "endpoint": "/attributevalues/{attributeValueDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributeValues/getAttributevaluesAttributevaluedbidResponse",
                                "IsEqual:/result/attributeValueDbId:attributeValueDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributevalues/{attributeValueDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributevalues/{attributeValueDbId0}"
                    },
                    "requires": [
                        "attributeValueDbId0"
                    ]
                },
                {
                    "description": "Get the details for a specific Germplasm Attribute",
                    "endpoint": "/attributevalues/{attributeValueDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributeValues/getAttributevaluesAttributevaluedbidResponse",
                                "IsEqual:/result/attributeValueDbId:attributeValueDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributevalues/{attributeValueDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributevalues/{attributeValueDbId1}"
                    },
                    "requires": [
                        "attributeValueDbId1"
                    ]
                },
                {
                    "description": "Create new Germplasm Attribute Values",
                    "endpoint": "/attributevalues",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributeValues/postAttributevaluesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /attributevalues",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/attributevalues"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Germplasm Attribute Value",
                    "endpoint": "/attributevalues/{attributeValueDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GermplasmAttributeValues/putAttributevaluesAttributevaluedbidResponse",
                                "IsEqual:/result/attributeValueDbId:attributeValueDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /attributevalues/{attributeValueDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/attributevalues/{attributeValueDbId0}"
                    },
                    "requires": [
                        "attributeValueDbId0"
                    ]
                },
                {
                    "description": "Search for a set of Germplasm Attribute Values based on some criteria\n        \nSee Search Services for additional implementation details.",
                    "endpoint": "/search/attributevalues",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/GermplasmAttributeValues/postSearchAttributevaluesResponse:attributevaluesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/attributevalues",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/attributevalues"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a Germplasm Attribute Values search request\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/attributevalues/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/GermplasmAttributeValues/getSearchAttributevaluesSearchresultsdbidResponse:attributevaluesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/attributevalues/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/attributevalues/{attributevaluesSearchResultDbId}"
                    },
                    "requires": [
                        "attributevaluesSearchResultDbId"
                    ]
                }
            ],
            "name": "Germplasm Attribute Values"
        },
        {
            "description": "Information about Crossing Projects",
            "item": [
                {
                    "description": "Get a filtered list of Crossing Projects.",
                    "endpoint": "/crossingprojects",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CrossingProjects/getCrossingprojectsResponse",
                                "GetValue:/result/data/0/crossingProjectDbId:crossingProjectDbId0",
                                "GetValue:/result/data/1/crossingProjectDbId:crossingProjectDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /crossingprojects",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/crossingprojects"
                    },
                    "requires": []
                },
                {
                    "description": "Get a filtered list of Crossing Projects.",
                    "endpoint": "/crossingprojects/{crossingProjectDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CrossingProjects/getCrossingprojectsCrossingprojectdbidResponse",
                                "IsEqual:/result/crossingProjectDbId:crossingProjectDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /crossingprojects/{crossingProjectDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/crossingprojects/{crossingProjectDbId0}"
                    },
                    "requires": [
                        "crossingProjectDbId0"
                    ]
                },
                {
                    "description": "Get a filtered list of Crossing Projects.",
                    "endpoint": "/crossingprojects/{crossingProjectDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CrossingProjects/getCrossingprojectsCrossingprojectdbidResponse",
                                "IsEqual:/result/crossingProjectDbId:crossingProjectDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /crossingprojects/{crossingProjectDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/crossingprojects/{crossingProjectDbId1}"
                    },
                    "requires": [
                        "crossingProjectDbId1"
                    ]
                },
                {
                    "description": "Create new Crossing Project entities on this server",
                    "endpoint": "/crossingprojects",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CrossingProjects/postCrossingprojectsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /crossingprojects",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/crossingprojects"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Crossing Project entity on this server",
                    "endpoint": "/crossingprojects/{crossingProjectDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CrossingProjects/putCrossingprojectsCrossingprojectdbidResponse",
                                "IsEqual:/result/crossingProjectDbId:crossingProjectDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /crossingprojects/{crossingProjectDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/crossingprojects/{crossingProjectDbId0}"
                    },
                    "requires": [
                        "crossingProjectDbId0"
                    ]
                }
            ],
            "name": "Crossing Projects"
        },
        {
            "description": "Information about Crosses",
            "item": [
                {
                    "description": "Get a filtered list of Cross entities.",
                    "endpoint": "/crosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Crosses/getCrossesResponse",
                                "GetValue:/result/data/0/crosseDbId:crosseDbId0",
                                "GetValue:/result/data/1/crosseDbId:crosseDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /crosses",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/crosses"
                    },
                    "requires": []
                },
                {
                    "description": "Get a filtered list of Planned Cross entities.",
                    "endpoint": "/plannedcrosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Crosses/getPlannedcrossesResponse",
                                "GetValue:/result/data/0/plannedcrosseDbId:plannedcrosseDbId0",
                                "GetValue:/result/data/1/plannedcrosseDbId:plannedcrosseDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /plannedcrosses",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/plannedcrosses"
                    },
                    "requires": []
                },
                {
                    "description": "Create new Cross entities on this server",
                    "endpoint": "/crosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Crosses/postCrossesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /crosses",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/crosses"
                    },
                    "requires": []
                },
                {
                    "description": "Create new Planned Cross entities on this server",
                    "endpoint": "/plannedcrosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Crosses/postPlannedcrossesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /plannedcrosses",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/plannedcrosses"
                    },
                    "requires": []
                },
                {
                    "description": "Update existing Cross entities on this server",
                    "endpoint": "/crosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Crosses/putCrossesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /crosses",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/crosses"
                    },
                    "requires": []
                },
                {
                    "description": "Update existing Planned Cross entities on this server",
                    "endpoint": "/plannedcrosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Crosses/putPlannedcrossesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /plannedcrosses",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/plannedcrosses"
                    },
                    "requires": []
                }
            ],
            "name": "Crosses"
        },
        {
            "description": "Information about Seed Lots",
            "item": [
                {
                    "description": "Get a filtered list of Seed Lot descriptions available in a system.",
                    "endpoint": "/seedlots",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/SeedLots/getSeedlotsResponse",
                                "GetValue:/result/data/0/seedLotDbId:seedLotDbId0",
                                "GetValue:/result/data/1/seedLotDbId:seedLotDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots"
                    },
                    "requires": []
                },
                {
                    "description": "Get a filtered list of Seed Lot Transactions",
                    "endpoint": "/seedlots/transactions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/SeedLots/getSeedlotsTransactionsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots/transactions",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots/transactions"
                    },
                    "requires": []
                },
                {
                    "description": "Get a specific Seed Lot by seedLotDbId",
                    "endpoint": "/seedlots/{seedLotDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/SeedLots/getSeedlotsSeedlotdbidResponse",
                                "IsEqual:/result/seedLotDbId:seedLotDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots/{seedLotDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots/{seedLotDbId0}"
                    },
                    "requires": [
                        "seedLotDbId0"
                    ]
                },
                {
                    "description": "Get a specific Seed Lot by seedLotDbId",
                    "endpoint": "/seedlots/{seedLotDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/SeedLots/getSeedlotsSeedlotdbidResponse",
                                "IsEqual:/result/seedLotDbId:seedLotDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots/{seedLotDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots/{seedLotDbId1}"
                    },
                    "requires": [
                        "seedLotDbId1"
                    ]
                },
                {
                    "description": "Get all Transactions related to a specific Seed Lot",
                    "endpoint": "/seedlots/{seedLotDbId}/transactions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/SeedLots/getSeedlotsSeedlotdbidTransactionsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots/{seedLotDbId}/transactions",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots/{seedLotDbId0}/transactions"
                    },
                    "requires": [
                        "seedLotDbId0"
                    ]
                },
                {
                    "description": "Add new Seed Lot descriptions to a server",
                    "endpoint": "/seedlots",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/SeedLots/postSeedlotsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /seedlots",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/seedlots"
                    },
                    "requires": []
                },
                {
                    "description": "Add new Seed Lot Transaction to be recorded",
                    "endpoint": "/seedlots/transactions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/SeedLots/postSeedlotsTransactionsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /seedlots/transactions",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/seedlots/transactions"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Seed Lot",
                    "endpoint": "/seedlots/{seedLotDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/SeedLots/putSeedlotsSeedlotdbidResponse",
                                "IsEqual:/result/seedLotDbId:seedLotDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /seedlots/{seedLotDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/seedlots/{seedLotDbId0}"
                    },
                    "requires": [
                        "seedLotDbId0"
                    ]
                }
            ],
            "name": "Seed Lots"
        },
        {
            "description": "Information about Observation Units",
            "item": [
                {
                    "description": "Call to retrieve the list of supported observation levels. \n\nObservation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\nThe values are used to supply the `observationLevel` parameter in the observation unit details call.",
                    "endpoint": "/observationlevels",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationUnits/getObservationlevelsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationlevels",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationlevels"
                    },
                    "requires": []
                },
                {
                    "description": "Get a filtered set of Observation Units",
                    "endpoint": "/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationUnits/getObservationunitsResponse",
                                "GetValue:/result/data/0/observationUnitDbId:observationUnitDbId0",
                                "GetValue:/result/data/1/observationUnitDbId:observationUnitDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationunits",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific Observation Unit",
                    "endpoint": "/observationunits/{observationUnitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationUnits/getObservationunitsObservationunitdbidResponse",
                                "IsEqual:/result/observationUnitDbId:observationUnitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationunits/{observationUnitDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationunits/{observationUnitDbId0}"
                    },
                    "requires": [
                        "observationUnitDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific Observation Unit",
                    "endpoint": "/observationunits/{observationUnitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationUnits/getObservationunitsObservationunitdbidResponse",
                                "IsEqual:/result/observationUnitDbId:observationUnitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationunits/{observationUnitDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationunits/{observationUnitDbId1}"
                    },
                    "requires": [
                        "observationUnitDbId1"
                    ]
                },
                {
                    "description": "Add new Observation Units",
                    "endpoint": "/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationUnits/postObservationunitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /observationunits",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Update a set of Observation Units\n\nNote - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly to JSON.",
                    "endpoint": "/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationUnits/putObservationunitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /observationunits",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Observation Units",
                    "endpoint": "/observationunits/{observationUnitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationUnits/putObservationunitsObservationunitdbidResponse",
                                "IsEqual:/result/observationUnitDbId:observationUnitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /observationunits/{observationUnitDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/observationunits/{observationUnitDbId0}"
                    },
                    "requires": [
                        "observationUnitDbId0"
                    ]
                },
                {
                    "description": "<p>This service is designed to retrieve a table for observation values as a matrix of Observation Units and Observation Variables.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> ",
                    "endpoint": "/observationunits/table",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationUnits/getObservationunitsTableResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationunits/table",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationunits/table"
                    },
                    "requires": []
                },
                {
                    "description": "Returns a list of observationUnit with the observed Phenotypes.\n\nSee Search Services for additional implementation details.\n\nUse case - this section allows to get a dataset from multiple studies. It allows to integrate data from several databases.\n\nExample Use cases \n\n- Study a panel of germplasm across multiple studies\n\n- Get all data for a specific study \n\n- Get simple atomic phenotyping values \n\n- Study Locations for adaptation to climate change\n\n- Find phenotypes that are from after a certain timestamp\n\nobservationTimeStampRangeStart and observationTimeStampRangeEnd use Iso Standard 8601.\n\nobservationValue data type inferred from the ontology",
                    "endpoint": "/search/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/ObservationUnits/postSearchObservationunitsResponse:observationunitsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/observationunits",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Returns a list of observationUnit with the observed Phenotypes.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/observationunits/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/ObservationUnits/getSearchObservationunitsSearchresultsdbidResponse:observationunitsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/observationunits/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/observationunits/{observationunitsSearchResultDbId}"
                    },
                    "requires": [
                        "observationunitsSearchResultDbId"
                    ]
                }
            ],
            "name": "Observation Units"
        },
        {
            "description": "Information about Observations",
            "item": [
                {
                    "description": "Retrieve all observations where there are measurements for the given observation variables.\n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm",
                    "endpoint": "/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Observations/getObservationsResponse",
                                "GetValue:/result/data/0/observationDbId:observationDbId0",
                                "GetValue:/result/data/1/observationDbId:observationDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observations",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observations"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific Observations\n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm",
                    "endpoint": "/observations/{observationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Observations/getObservationsObservationdbidResponse",
                                "IsEqual:/result/observationDbId:observationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observations/{observationDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observations/{observationDbId0}"
                    },
                    "requires": [
                        "observationDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific Observations\n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm",
                    "endpoint": "/observations/{observationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Observations/getObservationsObservationdbidResponse",
                                "IsEqual:/result/observationDbId:observationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observations/{observationDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observations/{observationDbId1}"
                    },
                    "requires": [
                        "observationDbId1"
                    ]
                },
                {
                    "description": "Add new Observation entities",
                    "endpoint": "/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Observations/postObservationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /observations",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/observations"
                    },
                    "requires": []
                },
                {
                    "description": "Update multiple Observation entities simultaneously with a single call\n\nInclude as many `observationDbIds` in the request as needed.\n\nNote - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly from JSON.",
                    "endpoint": "/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Observations/putObservationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /observations",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/observations"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Observation",
                    "endpoint": "/observations/{observationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Observations/putObservationsObservationdbidResponse",
                                "IsEqual:/result/observationDbId:observationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /observations/{observationDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/observations/{observationDbId0}"
                    },
                    "requires": [
                        "observationDbId0"
                    ]
                },
                {
                    "description": "<p>This service is designed to retrieve a table of time dependant observation values as a matrix of Observation Units and Observation Variables.\nThis is also sometimes called a Time Series. This service takes the \"Sparse Table\" approach for representing this time dependant data.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> ",
                    "endpoint": "/observations/table",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Observations/getObservationsTableResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observations/table",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observations/table"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for a set of Observations. Returns an Id which reference the results of this search",
                    "endpoint": "/search/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Observations/postSearchObservationsResponse:observationsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/observations",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/observations"
                    },
                    "requires": []
                },
                {
                    "description": "Returns a list of Observations based on search criteria.\n\nobservationTimeStamp - Iso Standard 8601.\n\nobservationValue data type inferred from the ontology",
                    "endpoint": "/search/observations/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Observations/getSearchObservationsSearchresultsdbidResponse:observationsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/observations/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/observations/{observationsSearchResultDbId}"
                    },
                    "requires": [
                        "observationsSearchResultDbId"
                    ]
                }
            ],
            "name": "Observations"
        },
        {
            "description": "Information about Images",
            "item": [
                {
                    "description": "Get filtered set of image meta data\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.",
                    "endpoint": "/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Images/getImagesResponse",
                                "GetValue:/result/data/0/imageDbId:imageDbId0",
                                "GetValue:/result/data/1/imageDbId:imageDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /images",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/images"
                    },
                    "requires": []
                },
                {
                    "description": "Get one image meta data object\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.",
                    "endpoint": "/images/{imageDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Images/getImagesImagedbidResponse",
                                "IsEqual:/result/imageDbId:imageDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /images/{imageDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/images/{imageDbId0}"
                    },
                    "requires": [
                        "imageDbId0"
                    ]
                },
                {
                    "description": "Get one image meta data object\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.",
                    "endpoint": "/images/{imageDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Images/getImagesImagedbidResponse",
                                "IsEqual:/result/imageDbId:imageDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /images/{imageDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/images/{imageDbId1}"
                    },
                    "requires": [
                        "imageDbId1"
                    ]
                },
                {
                    "description": "Create a new image meta data object\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.\n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.\n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.\n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. '",
                    "endpoint": "/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Images/postImagesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /images",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/images"
                    },
                    "requires": []
                },
                {
                    "description": "Update an image meta data object\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}/imagecontent' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" as an absolute path for retrieving the image, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's. \n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons. \n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content.",
                    "endpoint": "/images/{imageDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Images/putImagesImagedbidResponse",
                                "IsEqual:/result/imageDbId:imageDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /images/{imageDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/images/{imageDbId0}"
                    },
                    "requires": [
                        "imageDbId0"
                    ]
                },
                {
                    "description": "Update an image with the image file content\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" for retrieving the image, wherever it happens to live.",
                    "endpoint": "/images/{imageDbId}/imagecontent",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Images/putImagesImagedbidImagecontentResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /images/{imageDbId}/imagecontent",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/images/{imageDbId0}/imagecontent"
                    },
                    "requires": [
                        "imageDbId0"
                    ]
                },
                {
                    "description": "Get filtered set of image meta data\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Images/postSearchImagesResponse:imagesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/images",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/images"
                    },
                    "requires": []
                },
                {
                    "description": "Get filtered set of image meta data\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.",
                    "endpoint": "/search/images/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Images/getSearchImagesSearchresultsdbidResponse:imagesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/images/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/images/{imagesSearchResultDbId}"
                    },
                    "requires": [
                        "imagesSearchResultDbId"
                    ]
                }
            ],
            "name": "Images"
        },
        {
            "description": "Information about Observation Variables",
            "item": [
                {
                    "description": "Call to retrieve a list of observationVariables available in the system.",
                    "endpoint": "/variables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationVariables/getVariablesResponse",
                                "GetValue:/result/data/0/observationVariableDbId:observationVariableDbId0",
                                "GetValue:/result/data/1/observationVariableDbId:observationVariableDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variables",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variables"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve variable details",
                    "endpoint": "/variables/{observationVariableDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationVariables/getVariablesObservationvariabledbidResponse",
                                "IsEqual:/result/observationVariableDbId:observationVariableDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variables/{observationVariableDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variables/{observationVariableDbId0}"
                    },
                    "requires": [
                        "observationVariableDbId0"
                    ]
                },
                {
                    "description": "Retrieve variable details",
                    "endpoint": "/variables/{observationVariableDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationVariables/getVariablesObservationvariabledbidResponse",
                                "IsEqual:/result/observationVariableDbId:observationVariableDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variables/{observationVariableDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variables/{observationVariableDbId1}"
                    },
                    "requires": [
                        "observationVariableDbId1"
                    ]
                },
                {
                    "description": "Add new Observation Variables to the system.",
                    "endpoint": "/variables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationVariables/postVariablesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /variables",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/variables"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Observation Variable",
                    "endpoint": "/variables/{observationVariableDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ObservationVariables/putVariablesObservationvariabledbidResponse",
                                "IsEqual:/result/observationVariableDbId:observationVariableDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /variables/{observationVariableDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/variables/{observationVariableDbId0}"
                    },
                    "requires": [
                        "observationVariableDbId0"
                    ]
                },
                {
                    "description": "Search observation variables.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/variables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/ObservationVariables/postSearchVariablesResponse:variablesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/variables",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/variables"
                    },
                    "requires": []
                },
                {
                    "description": "Search observation variables.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/variables/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/ObservationVariables/getSearchVariablesSearchresultsdbidResponse:variablesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/variables/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/variables/{variablesSearchResultDbId}"
                    },
                    "requires": [
                        "variablesSearchResultDbId"
                    ]
                }
            ],
            "name": "Observation Variables"
        },
        {
            "description": "Information about Traits",
            "item": [
                {
                    "description": "Call to retrieve a list of traits available in the system and their associated variables.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'",
                    "endpoint": "/traits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Traits/getTraitsResponse",
                                "GetValue:/result/data/0/traitDbId:traitDbId0",
                                "GetValue:/result/data/1/traitDbId:traitDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /traits",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/traits"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve the details of a single trait\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/traits/{traitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Traits/getTraitsTraitdbidResponse",
                                "IsEqual:/result/traitDbId:traitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /traits/{traitDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/traits/{traitDbId0}"
                    },
                    "requires": [
                        "traitDbId0"
                    ]
                },
                {
                    "description": "Retrieve the details of a single trait\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/traits/{traitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Traits/getTraitsTraitdbidResponse",
                                "IsEqual:/result/traitDbId:traitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /traits/{traitDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/traits/{traitDbId1}"
                    },
                    "requires": [
                        "traitDbId1"
                    ]
                },
                {
                    "description": "Create a new trait object in the database",
                    "endpoint": "/traits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Traits/postTraitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /traits",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/traits"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing trait",
                    "endpoint": "/traits/{traitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Traits/putTraitsTraitdbidResponse",
                                "IsEqual:/result/traitDbId:traitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /traits/{traitDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/traits/{traitDbId0}"
                    },
                    "requires": [
                        "traitDbId0"
                    ]
                }
            ],
            "name": "Traits"
        },
        {
            "description": "Information about Methods",
            "item": [
                {
                    "description": "Returns a list of Methods available on a server.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'",
                    "endpoint": "/methods",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Methods/getMethodsResponse",
                                "GetValue:/result/data/0/methodDbId:methodDbId0",
                                "GetValue:/result/data/1/methodDbId:methodDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /methods",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/methods"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve details about a specific method\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/methods/{methodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Methods/getMethodsMethoddbidResponse",
                                "IsEqual:/result/methodDbId:methodDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /methods/{methodDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/methods/{methodDbId0}"
                    },
                    "requires": [
                        "methodDbId0"
                    ]
                },
                {
                    "description": "Retrieve details about a specific method\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/methods/{methodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Methods/getMethodsMethoddbidResponse",
                                "IsEqual:/result/methodDbId:methodDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /methods/{methodDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/methods/{methodDbId1}"
                    },
                    "requires": [
                        "methodDbId1"
                    ]
                },
                {
                    "description": "Create a new method object in the database",
                    "endpoint": "/methods",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Methods/postMethodsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /methods",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/methods"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of an existing method",
                    "endpoint": "/methods/{methodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Methods/putMethodsMethoddbidResponse",
                                "IsEqual:/result/methodDbId:methodDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /methods/{methodDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/methods/{methodDbId0}"
                    },
                    "requires": [
                        "methodDbId0"
                    ]
                }
            ],
            "name": "Methods"
        },
        {
            "description": "Information about Scales",
            "item": [
                {
                    "description": "Returns a list of Scales available on a server.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/scales",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Scales/getScalesResponse",
                                "GetValue:/result/data/0/scaleDbId:scaleDbId0",
                                "GetValue:/result/data/1/scaleDbId:scaleDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /scales",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/scales"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve details about a specific scale\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/scales/{scaleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Scales/getScalesScaledbidResponse",
                                "IsEqual:/result/scaleDbId:scaleDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /scales/{scaleDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/scales/{scaleDbId0}"
                    },
                    "requires": [
                        "scaleDbId0"
                    ]
                },
                {
                    "description": "Retrieve details about a specific scale\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/scales/{scaleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Scales/getScalesScaledbidResponse",
                                "IsEqual:/result/scaleDbId:scaleDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /scales/{scaleDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/scales/{scaleDbId1}"
                    },
                    "requires": [
                        "scaleDbId1"
                    ]
                },
                {
                    "description": "Create a new scale object in the database",
                    "endpoint": "/scales",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Scales/postScalesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /scales",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/scales"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of an existing scale",
                    "endpoint": "/scales/{scaleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Scales/putScalesScaledbidResponse",
                                "IsEqual:/result/scaleDbId:scaleDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /scales/{scaleDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/scales/{scaleDbId0}"
                    },
                    "requires": [
                        "scaleDbId0"
                    ]
                }
            ],
            "name": "Scales"
        },
        {
            "description": "Information about Ontologies",
            "item": [
                {
                    "description": "Call to retrieve a list of observation variable ontologies available in the system.",
                    "endpoint": "/ontologies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Ontologies/getOntologiesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /ontologies",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/ontologies"
                    },
                    "requires": []
                }
            ],
            "name": "Ontologies"
        },
        {
            "description": "Information about Events",
            "item": [
                {
                    "description": "Get list of events",
                    "endpoint": "/events",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Events/getEventsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /events",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/events"
                    },
                    "requires": []
                }
            ],
            "name": "Events"
        },
        {
            "description": "Information about Genome Maps",
            "item": [
                {
                    "description": "Get list of maps",
                    "endpoint": "/maps",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GenomeMaps/getMapsResponse",
                                "GetValue:/result/data/0/mapDbId:mapDbId0",
                                "GetValue:/result/data/1/mapDbId:mapDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps"
                    },
                    "requires": []
                },
                {
                    "description": "Provides the number of markers on each linkageGroup and the max position on the linkageGroup",
                    "endpoint": "/maps/{mapDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GenomeMaps/getMapsMapdbidResponse",
                                "IsEqual:/result/mapDbId:mapDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId0}"
                    },
                    "requires": [
                        "mapDbId0"
                    ]
                },
                {
                    "description": "Provides the number of markers on each linkageGroup and the max position on the linkageGroup",
                    "endpoint": "/maps/{mapDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GenomeMaps/getMapsMapdbidResponse",
                                "IsEqual:/result/mapDbId:mapDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId1}"
                    },
                    "requires": [
                        "mapDbId1"
                    ]
                },
                {
                    "description": "Get the Linkage Groups of a specific Genomic Map. A Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.",
                    "endpoint": "/maps/{mapDbId}/linkagegroups",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GenomeMaps/getMapsMapdbidLinkagegroupsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId}/linkagegroups",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId0}/linkagegroups"
                    },
                    "requires": [
                        "mapDbId0"
                    ]
                },
                {
                    "description": "Get marker position information, based on Map, Linkage Group, and Marker ID",
                    "endpoint": "/markerpositions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/GenomeMaps/getMarkerpositionsResponse",
                                "GetValue:/result/data/0/markerpositionDbId:markerpositionDbId0",
                                "GetValue:/result/data/1/markerpositionDbId:markerpositionDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /markerpositions",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/markerpositions"
                    },
                    "requires": []
                },
                {
                    "description": "Get marker position information, based on Map, Linkage Group, and Marker ID",
                    "endpoint": "/search/markerpositions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/GenomeMaps/postSearchMarkerpositionsResponse:markerpositionsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/markerpositions",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/markerpositions"
                    },
                    "requires": []
                },
                {
                    "description": "Get marker position information, based on Map, Linkage Group, and Marker ID",
                    "endpoint": "/search/markerpositions/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/GenomeMaps/getSearchMarkerpositionsSearchresultsdbidResponse:markerpositionsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/markerpositions/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/markerpositions/{markerpositionsSearchResultDbId}"
                    },
                    "requires": [
                        "markerpositionsSearchResultDbId"
                    ]
                }
            ],
            "name": "Genome Maps"
        },
        {
            "description": "Information about Samples",
            "item": [
                {
                    "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.",
                    "endpoint": "/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Samples/getSamplesResponse",
                                "GetValue:/result/data/0/sampleDbId:sampleDbId0",
                                "GetValue:/result/data/1/sampleDbId:sampleDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /samples",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Used to retrieve the details of a single Sample from a Sample Tracking system.",
                    "endpoint": "/samples/{sampleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Samples/getSamplesSampledbidResponse",
                                "IsEqual:/result/sampleDbId:sampleDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /samples/{sampleDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/samples/{sampleDbId0}"
                    },
                    "requires": [
                        "sampleDbId0"
                    ]
                },
                {
                    "description": "Used to retrieve the details of a single Sample from a Sample Tracking system.",
                    "endpoint": "/samples/{sampleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Samples/getSamplesSampledbidResponse",
                                "IsEqual:/result/sampleDbId:sampleDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /samples/{sampleDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/samples/{sampleDbId1}"
                    },
                    "requires": [
                        "sampleDbId1"
                    ]
                },
                {
                    "description": "Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response.",
                    "endpoint": "/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Samples/postSamplesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /samples",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of an existing Sample",
                    "endpoint": "/samples/{sampleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Samples/putSamplesSampledbidResponse",
                                "IsEqual:/result/sampleDbId:sampleDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /samples/{sampleDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/samples/{sampleDbId0}"
                    },
                    "requires": [
                        "sampleDbId0"
                    ]
                },
                {
                    "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Samples/postSearchSamplesResponse:samplesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/samples",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/samples/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Samples/getSearchSamplesSearchresultsdbidResponse:samplesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/samples/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/samples/{samplesSearchResultDbId}"
                    },
                    "requires": [
                        "samplesSearchResultDbId"
                    ]
                }
            ],
            "name": "Samples"
        },
        {
            "description": "Information about Variant Sets",
            "item": [
                {
                    "description": "Will return a filtered list of `VariantSet`.",
                    "endpoint": "/variantsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/VariantSets/getVariantsetsResponse",
                                "GetValue:/result/data/0/variantSetDbId:variantSetDbId0",
                                "GetValue:/result/data/1/variantSetDbId:variantSetDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets"
                    },
                    "requires": []
                },
                {
                    "description": "This call will return a JSON version of a `VariantSet`.",
                    "endpoint": "/variantsets/{variantSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/VariantSets/getVariantsetsVariantsetdbidResponse",
                                "IsEqual:/result/variantSetDbId:variantSetDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId0}"
                    },
                    "requires": [
                        "variantSetDbId0"
                    ]
                },
                {
                    "description": "This call will return a JSON version of a `VariantSet`.",
                    "endpoint": "/variantsets/{variantSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/VariantSets/getVariantsetsVariantsetdbidResponse",
                                "IsEqual:/result/variantSetDbId:variantSetDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId1}"
                    },
                    "requires": [
                        "variantSetDbId1"
                    ]
                },
                {
                    "description": "Gets a list of `Calls` associated with a `VariantSet`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/variantsets/{variantSetDbId}/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/VariantSets/getVariantsetsVariantsetdbidCallsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId}/calls",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId0}/calls"
                    },
                    "requires": [
                        "variantSetDbId0"
                    ]
                },
                {
                    "description": "Gets a list of `CallSets` associated with a `VariantSet`.",
                    "endpoint": "/variantsets/{variantSetDbId}/callsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/VariantSets/getVariantsetsVariantsetdbidCallsetsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId}/callsets",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId0}/callsets"
                    },
                    "requires": [
                        "variantSetDbId0"
                    ]
                },
                {
                    "description": "This call will return an array of `Variants`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/variantsets/{variantSetDbId}/variants",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/VariantSets/getVariantsetsVariantsetdbidVariantsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId}/variants",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId0}/variants"
                    },
                    "requires": [
                        "variantSetDbId0"
                    ]
                },
                {
                    "description": "Will perform a search for `Calls` which match the search criteria in `variantSetsExtractRequest`. The results of the search will be used to create a new `VariantSet` on the server. The new `VariantSet` will be returned.",
                    "endpoint": "/variantsets/extract",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/VariantSets/postVariantsetsExtractResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /variantsets/extract",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/variantsets/extract"
                    },
                    "requires": []
                },
                {
                    "description": "Gets a list of `VariantSet` matching the search criteria.",
                    "endpoint": "/search/variantsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/VariantSets/postSearchVariantsetsResponse:variantsetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/variantsets",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/variantsets"
                    },
                    "requires": []
                },
                {
                    "description": "Gets a list of `VariantSet` matching the search criteria.",
                    "endpoint": "/search/variantsets/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/VariantSets/getSearchVariantsetsSearchresultsdbidResponse:variantsetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/variantsets/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/variantsets/{variantsetsSearchResultDbId}"
                    },
                    "requires": [
                        "variantsetsSearchResultDbId"
                    ]
                }
            ],
            "name": "Variant Sets"
        },
        {
            "description": "Information about Variants",
            "item": [
                {
                    "description": "Gets a filtered list of `Variants`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/variants",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Variants/getVariantsResponse",
                                "GetValue:/result/data/0/variantDbId:variantDbId0",
                                "GetValue:/result/data/1/variantDbId:variantDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variants",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variants"
                    },
                    "requires": []
                },
                {
                    "description": "`GET /variants/{id}` will return a JSON version of `Variant`.",
                    "endpoint": "/variants/{variantDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Variants/getVariantsVariantdbidResponse",
                                "IsEqual:/result/variantDbId:variantDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variants/{variantDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variants/{variantDbId0}"
                    },
                    "requires": [
                        "variantDbId0"
                    ]
                },
                {
                    "description": "`GET /variants/{id}` will return a JSON version of `Variant`.",
                    "endpoint": "/variants/{variantDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Variants/getVariantsVariantdbidResponse",
                                "IsEqual:/result/variantDbId:variantDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variants/{variantDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variants/{variantDbId1}"
                    },
                    "requires": [
                        "variantDbId1"
                    ]
                },
                {
                    "description": "The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant. `Calls` in this array are implicitly associated with this `Variant`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/variants/{variantDbId}/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Variants/getVariantsVariantdbidCallsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variants/{variantDbId}/calls",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variants/{variantDbId0}/calls"
                    },
                    "requires": [
                        "variantDbId0"
                    ]
                },
                {
                    "description": "Gets a list of `Variant` matching the search criteria.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/search/variants",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Variants/postSearchVariantsResponse:variantsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/variants",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/variants"
                    },
                    "requires": []
                },
                {
                    "description": "Gets a list of `Variant` matching the search criteria.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/search/variants/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Variants/getSearchVariantsSearchresultsdbidResponse:variantsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/variants/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/variants/{variantsSearchResultDbId}"
                    },
                    "requires": [
                        "variantsSearchResultDbId"
                    ]
                }
            ],
            "name": "Variants"
        },
        {
            "description": "Information about Call Sets",
            "item": [
                {
                    "description": "Gets a filtered list of `CallSet` JSON objects.",
                    "endpoint": "/callsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CallSets/getCallsetsResponse",
                                "GetValue:/result/data/0/callSetDbId:callSetDbId0",
                                "GetValue:/result/data/1/callSetDbId:callSetDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /callsets",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/callsets"
                    },
                    "requires": []
                },
                {
                    "description": "Gets a `CallSet` by ID.",
                    "endpoint": "/callsets/{callSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CallSets/getCallsetsCallsetdbidResponse",
                                "IsEqual:/result/callSetDbId:callSetDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /callsets/{callSetDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/callsets/{callSetDbId0}"
                    },
                    "requires": [
                        "callSetDbId0"
                    ]
                },
                {
                    "description": "Gets a `CallSet` by ID.",
                    "endpoint": "/callsets/{callSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CallSets/getCallsetsCallsetdbidResponse",
                                "IsEqual:/result/callSetDbId:callSetDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /callsets/{callSetDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/callsets/{callSetDbId1}"
                    },
                    "requires": [
                        "callSetDbId1"
                    ]
                },
                {
                    "description": "Gets a list of `Calls` associated with a `CallSet`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/callsets/{callSetDbId}/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/CallSets/getCallsetsCallsetdbidCallsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /callsets/{callSetDbId}/calls",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/callsets/{callSetDbId0}/calls"
                    },
                    "requires": [
                        "callSetDbId0"
                    ]
                },
                {
                    "description": "Gets a list of call sets matching the search criteria.",
                    "endpoint": "/search/callsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/CallSets/postSearchCallsetsResponse:callsetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/callsets",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/callsets"
                    },
                    "requires": []
                },
                {
                    "description": "Gets a list of call sets matching the search criteria.",
                    "endpoint": "/search/callsets/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/CallSets/getSearchCallsetsSearchresultsdbidResponse:callsetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/callsets/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/callsets/{callsetsSearchResultDbId}"
                    },
                    "requires": [
                        "callsetsSearchResultDbId"
                    ]
                }
            ],
            "name": "Call Sets"
        },
        {
            "description": "Information about Calls",
            "item": [
                {
                    "description": "Gets a filtered list of `Call` JSON objects.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Calls/getCallsResponse",
                                "GetValue:/result/data/0/callDbId:callDbId0",
                                "GetValue:/result/data/1/callDbId:callDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /calls",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/calls"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for `Calls`\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/search/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Calls/postSearchCallsResponse:callsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/calls",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/calls"
                    },
                    "requires": []
                },
                {
                    "description": "Returns a filtered list of `Call` JSON objects.\n\nSee Search Services for additional implementation details.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
                    "endpoint": "/search/calls/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/Calls/getSearchCallsSearchresultsdbidResponse:callsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/calls/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/calls/{callsSearchResultDbId}"
                    },
                    "requires": [
                        "callsSearchResultDbId"
                    ]
                }
            ],
            "name": "Calls"
        },
        {
            "description": "Information about Reference Sets",
            "item": [
                {
                    "description": "Gets a filtered list of `ReferenceSets`.",
                    "endpoint": "/referencesets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ReferenceSets/getReferencesetsResponse",
                                "GetValue:/result/data/0/referenceSetDbId:referenceSetDbId0",
                                "GetValue:/result/data/1/referenceSetDbId:referenceSetDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /referencesets",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/referencesets"
                    },
                    "requires": []
                },
                {
                    "description": "Gets a `ReferenceSet` by ID.",
                    "endpoint": "/referencesets/{referenceSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ReferenceSets/getReferencesetsReferencesetdbidResponse",
                                "IsEqual:/result/referenceSetDbId:referenceSetDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /referencesets/{referenceSetDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/referencesets/{referenceSetDbId0}"
                    },
                    "requires": [
                        "referenceSetDbId0"
                    ]
                },
                {
                    "description": "Gets a `ReferenceSet` by ID.",
                    "endpoint": "/referencesets/{referenceSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/ReferenceSets/getReferencesetsReferencesetdbidResponse",
                                "IsEqual:/result/referenceSetDbId:referenceSetDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /referencesets/{referenceSetDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/referencesets/{referenceSetDbId1}"
                    },
                    "requires": [
                        "referenceSetDbId1"
                    ]
                },
                {
                    "description": "Gets a list of `ReferenceSet` matching the search criteria.",
                    "endpoint": "/search/referencesets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/ReferenceSets/postSearchReferencesetsResponse:referencesetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/referencesets",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/referencesets"
                    },
                    "requires": []
                },
                {
                    "description": "Gets a list of `ReferenceSet` matching the search criteria.",
                    "endpoint": "/search/referencesets/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/ReferenceSets/getSearchReferencesetsSearchresultsdbidResponse:referencesetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/referencesets/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/referencesets/{referencesetsSearchResultDbId}"
                    },
                    "requires": [
                        "referencesetsSearchResultDbId"
                    ]
                }
            ],
            "name": "Reference Sets"
        },
        {
            "description": "Information about References",
            "item": [
                {
                    "description": "`GET /references` will return a filtered list of `Reference` JSON objects.",
                    "endpoint": "/references",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/References/getReferencesResponse",
                                "GetValue:/result/data/0/referenceDbId:referenceDbId0",
                                "GetValue:/result/data/1/referenceDbId:referenceDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /references",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/references"
                    },
                    "requires": []
                },
                {
                    "description": "`GET /references/{reference_id}` will return a JSON version of\n`Reference`.",
                    "endpoint": "/references/{referenceDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/References/getReferencesReferencedbidResponse",
                                "IsEqual:/result/referenceDbId:referenceDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /references/{referenceDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/references/{referenceDbId0}"
                    },
                    "requires": [
                        "referenceDbId0"
                    ]
                },
                {
                    "description": "`GET /references/{reference_id}` will return a JSON version of\n`Reference`.",
                    "endpoint": "/references/{referenceDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/References/getReferencesReferencedbidResponse",
                                "IsEqual:/result/referenceDbId:referenceDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /references/{referenceDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/references/{referenceDbId1}"
                    },
                    "requires": [
                        "referenceDbId1"
                    ]
                },
                {
                    "description": "Lists `Reference` bases by ID and optional range.",
                    "endpoint": "/references/{referenceDbId}/bases",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/References/getReferencesReferencedbidBasesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /references/{referenceDbId}/bases",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/references/{referenceDbId0}/bases"
                    },
                    "requires": [
                        "referenceDbId0"
                    ]
                },
                {
                    "description": "`POST /references/search` must accept a JSON version of\n`SearchReferencesRequest` as the post body and will return a JSON\nversion of `SearchReferencesResponse`.",
                    "endpoint": "/search/references",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/References/postSearchReferencesResponse:referencesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/references",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/references"
                    },
                    "requires": []
                },
                {
                    "description": "`POST /references/search` must accept a JSON version of\n`SearchReferencesRequest` as the post body and will return a JSON\nversion of `SearchReferencesResponse`.",
                    "endpoint": "/search/references/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:102,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "SearchSchema:/v2.0/References/getSearchReferencesSearchresultsdbidResponse:referencesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/references/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/references/{referencesSearchResultDbId}"
                    },
                    "requires": [
                        "referencesSearchResultDbId"
                    ]
                }
            ],
            "name": "References"
        },
        {
            "description": "Information about Vendor",
            "item": [
                {
                    "description": "List current available orders",
                    "endpoint": "/vendor/orders",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Vendor/getVendorOrdersResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a new order to a vendor",
                    "endpoint": "/vendor/orders",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Vendor/postVendorOrdersResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /vendor/orders",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/vendor/orders"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve the plate and sample details of an order being processed",
                    "endpoint": "/vendor/orders/{orderId}/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Vendor/getVendorOrdersOrderidPlatesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders/{orderId}/plates",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders/{orderId0}/plates"
                    },
                    "requires": [
                        "orderId0"
                    ]
                },
                {
                    "description": "Retrieve the data files generated by the vendors analysis",
                    "endpoint": "/vendor/orders/{orderId}/results",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Vendor/getVendorOrdersOrderidResultsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders/{orderId}/results",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders/{orderId0}/results"
                    },
                    "requires": [
                        "orderId0"
                    ]
                },
                {
                    "description": "Retrieve the current status of an order being processed",
                    "endpoint": "/vendor/orders/{orderId}/status",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Vendor/getVendorOrdersOrderidStatusResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders/{orderId}/status",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders/{orderId0}/status"
                    },
                    "requires": [
                        "orderId0"
                    ]
                },
                {
                    "description": "Submit a new set of Sample data",
                    "endpoint": "/vendor/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Vendor/postVendorPlatesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /vendor/plates",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/vendor/plates"
                    },
                    "requires": []
                },
                {
                    "description": "Get data for a submitted set of plates",
                    "endpoint": "/vendor/plates/{submissionId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Vendor/getVendorPlatesSubmissionidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/plates/{submissionId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/plates/{submissionId0}"
                    },
                    "requires": [
                        "submissionId0"
                    ]
                },
                {
                    "description": "Defines the plate format specification for the vendor.",
                    "endpoint": "/vendor/specifications",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.0/metadata",
                                "Schema:/v2.0/Vendor/getVendorSpecificationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/specifications",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/specifications"
                    },
                    "requires": []
                }
            ],
            "name": "Vendor"
        }
    ]
}