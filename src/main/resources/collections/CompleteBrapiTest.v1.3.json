{
    "info": {
        "description": "Includes all resources, schema and data",
        "name": "Complete BrAPI test",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "description": "Check the available calls on a server",
            "item": [
                {
                    "description": " Implementation Notes\nHaving a consistent structure for the path string of each call is very important for teams to be able to connect and find errors. Read more on Github.\nHere are the rules for the path of each call that should be returned\n\n\n\nEvery word in the call path should match the documentation exactly, both in spelling and capitalization. Note that path strings are all lower case, but path parameters are camel case.\n\nEach path should start relative to \"/\" and therefore should not include \"/\"\n\nNo leading or trailing slashes (\"/\") \n\nPath parameters are wrapped in curly braces (\"{}\"). The name of the path parameter should be spelled exactly as it is specified in the documentation.\n\n\n\n\nExamples GOOD    \"call\": \"germplasm/{germplasmDbId}/markerprofiles\" BAD    \"call\": \"germplasm/{id}/markerprofiles\" BAD    \"call\": \"germplasm/{germplasmDbId}/markerProfiles\" BAD    \"call\": \"germplasm/{germplasmdbid}/markerprofiles\" BAD    \"call\": \"brapi/v1/germplasm/{germplasmDbId}/markerprofiles\" BAD    \"call\": \"/germplasm/{germplasmDbId}/markerprofiles/\" BAD    \"call\": \"germplasm/<germplasmDbId>/markerprofiles\"\n\n\n\ntest-server.brapi.org/brapi/v1/calls",
                    "endpoint": "/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Calls/getCallsResponse",
								"SaveCalls:v1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /calls",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/calls"
                    },
                    "requires": []
                }
            ],
            "name": "Calls"
        },
        {
            "description": "Information about Crops",
            "item": [
                {
                    "description": "List the common crop names for the crops available in a database server. \n\nThis call is **required** for multi-crop systems where data from multiple crops may be stored in the same database server. A distinct database server is defined by everything in the URL before \"/brapi/v1\", including host name and base path.  \n\nThis call is recommended for single crop systems to be compatible with multi-crop clients. For a single crop system the response should contain an array with exactly 1 element. \n\nThe common crop name can be used as a search parameter for Programs, Studies, and Germplasm.\n\n\ntest-server.brapi.org/brapi/v1/commonCropNames",
                    "endpoint": "/commoncropnames",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Crops/getCommoncropnamesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /commoncropnames",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/commoncropnames"
                    },
                    "requires": []
                }
            ],
            "name": "Crops"
        },
        {
            "description": "Information about Programs",
            "item": [
                {
                    "description": "Call to retrieve a list of programs.",
                    "endpoint": "/programs",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Programs/getProgramsResponse",
                                "GetValue:/result/data/0/programDbId:programDbId0",
                                "GetValue:/result/data/1/programDbId:programDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /programs",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/programs"
                    },
                    "requires": []
                },
                {
                    "description": "Advanced searching for the programs resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/programs",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Programs/postSearchProgramsResponse",
                                "GetValue:/result/searchResultDbId:programsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/programs",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/programs"
                    },
                    "requires": []
                },
                {
                    "description": "Advanced searching for the programs resource.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/programs/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Programs/getSearchProgramsSearchresultsdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/programs/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/programs/{programsSearchResultDbId}"
                    },
                    "requires": [
                        "programsSearchResultDbId"
                    ]
                }
            ],
            "name": "Programs"
        },
        {
            "description": "Information about Locations",
            "item": [
                {
                    "description": "Implemented by: Germinate\n\nGet a list of locations.\n\n* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n\n* `altitude` is in meters.\n\n**Note**: Consider revising to describe polygon lat/lan points and check if adopting http://geojson.org/ is worth doing for v1.",
                    "endpoint": "/locations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Locations/getLocationsResponse",
                                "GetValue:/result/data/0/locationDbId:locationDbId0",
                                "GetValue:/result/data/1/locationDbId:locationDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /locations",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/locations"
                    },
                    "requires": []
                },
                {
                    "description": "Get details for a location.\n\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n\n- `altitude` is in meters.",
                    "endpoint": "/locations/{locationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Locations/getLocationsLocationdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /locations/{locationDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/locations/{locationDbId0}"
                    },
                    "requires": [
                        "locationDbId0"
                    ]
                },
                {
                    "description": "Get details for a location.\n\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n\n- `altitude` is in meters.",
                    "endpoint": "/locations/{locationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Locations/getLocationsLocationdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /locations/{locationDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/locations/{locationDbId1}"
                    },
                    "requires": [
                        "locationDbId1"
                    ]
                }
            ],
            "name": "Locations"
        },
        {
            "description": "Information about Trials",
            "item": [
                {
                    "description": "Retrieve a filtered list of Trials. A Trial is a collection of studies",
                    "endpoint": "/trials",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Trials/getTrialsResponse",
                                "GetValue:/result/data/0/trialDbId:trialDbId0",
                                "GetValue:/result/data/1/trialDbId:trialDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /trials",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/trials"
                    },
                    "requires": []
                },
                {
                    "description": "Get trial by id.",
                    "endpoint": "/trials/{trialDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Trials/getTrialsTrialdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /trials/{trialDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/trials/{trialDbId0}"
                    },
                    "requires": [
                        "trialDbId0"
                    ]
                },
                {
                    "description": "Get trial by id.",
                    "endpoint": "/trials/{trialDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Trials/getTrialsTrialdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /trials/{trialDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/trials/{trialDbId1}"
                    },
                    "requires": [
                        "trialDbId1"
                    ]
                }
            ],
            "name": "Trials"
        },
        {
            "description": "Information about Studies",
            "item": [
                {
                    "description": "Get list of studies\nStartDate and endDate should be ISO8601 format for dates\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/studies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/postSearchStudiesResponse",
                                "GetValue:/result/searchResultDbId:studiesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/studies",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/studies"
                    },
                    "requires": []
                },
                {
                    "description": "Get list of studies\n\nStartDate and endDate should be ISO8601 format for dates\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/studies/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getSearchStudiesSearchresultsdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/studies/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/studies/{studiesSearchResultDbId}"
                    },
                    "requires": [
                        "studiesSearchResultDbId"
                    ]
                },
                {
                    "description": "Call to retrive all seasons in the database.\n\nA season is made of 2 parts\n\n- The primary year \n\n- A term which defines a segment of the year. \nThis could be a traditional season, like \"Spring\" or \"Summer\"; \nthis could be a month, like \"May\" or \"June\"; \nor this could be an arbitrary season name which is meaningful to the breeding program like \"PlantingTime_3\" or \"Season E\"",
                    "endpoint": "/seasons",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getSeasonsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seasons",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seasons"
                    },
                    "requires": []
                },
                {
                    "description": "Get list of studies\n\nImplementation Notes\n\nStartDate and endDate should be ISO8601 format for dates\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/studies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudiesResponse",
                                "GetValue:/result/data/0/studyDbId:studyDbId0",
                                "GetValue:/result/data/1/studyDbId:studyDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve the information of the study required for field data collection\n\nAn additionalInfo field was added to provide a controlled vocabulary for less common data fields.\n\nLinked data\n\n- Observation Variables: ```/brapi/v1/studies/{studyDbId}/observationvariables``` \n\n- Germplasm: ```/brapi/v1/studies/{studyDbId}/germplasm``` \n\n- Observation Units: ```/brapi/v1/studies/{studyDbId}/observationunits``` \n\n- Layout: ```brapi/v1/studies/{studyDbId}/layout```",
                    "endpoint": "/studies/{studyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudiesStudydbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId0}"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Retrieve the information of the study required for field data collection\n\nAn additionalInfo field was added to provide a controlled vocabulary for less common data fields.\n\nLinked data\n\n- Observation Variables: ```/brapi/v1/studies/{studyDbId}/observationvariables``` \n\n- Germplasm: ```/brapi/v1/studies/{studyDbId}/germplasm``` \n\n- Observation Units: ```/brapi/v1/studies/{studyDbId}/observationunits``` \n\n- Layout: ```brapi/v1/studies/{studyDbId}/layout```",
                    "endpoint": "/studies/{studyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudiesStudydbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId1}"
                    },
                    "requires": [
                        "studyDbId1"
                    ]
                },
                {
                    "description": "Get the available Germplasm which are associated with this study",
                    "endpoint": "/studies/{studyDbId}/germplasm",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudiesStudydbidGermplasmResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId}/germplasm",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId0}/germplasm"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Retrive the layout details for a study. Returns an array of observation unit position data which describes where each unit and germplasm is located within the study layout\n\nRetrieve the plot layout of the study with id {id}.\n\nFor each observationUnit within a study, return the `block`, `replicate`, and `entryType` values as well as the `X` and `Y` coordinates. `entryType` can be \"check\", \"test\", or \"filler\".\n\nAlso return some human readable meta data about the observationUnit and germplasm.",
                    "endpoint": "/studies/{studyDbId}/layouts",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudiesStudydbidLayoutsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId}/layouts",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId0}/layouts"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Modify a study layout\n\nUpdate the layout data for a set of observation units within a study. Each layout object is a subset of fields within an observationUnit, so it doesnt make sense to create a new layout object by itself.\n\nImplementation Notes:\n\n+ If any of the fields in the request object is missing, that piece of data will not be updated. \n\n+ If an observationUnitDbId can not be found within the given study, an error will be returned. \n\n+ `entryType` can have the values \"check\", \"test\", or \"filler\". \n\n+ The response should match the structure of the response from `GET studies/{studyDbId}/layout`, but it should only contain the layout objects which have been updated by the PUT request. Also, pagination is not available in the response.",
                    "endpoint": "/studies/{studyDbId}/layouts",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/putStudiesStudydbidLayoutsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /studies/{studyDbId}/layouts",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/studies/{studyDbId0}/layouts"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Retrieve all observations where there are measurements for the given observation variables.\n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm",
                    "endpoint": "/studies/{studyDbId}/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudiesStudydbidObservationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId}/observations",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId0}/observations"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Implementation Guidelines: \n\n+ If an `observationDbId` is \"null\" or an empty string in the request, a NEW observation should be created for the given study and observationUnit \n\n+ If an `observationDbId` is populated but not found in the database, a NEW observation should be created for the given study and observationUnit AND an NEW `observationDbId` should be assigned to it. A warning should be returned to the client. \n\n+ If an `observationDbId` is populated and found in the database, but the existing entry is not associated with the given study or observationUnit, a NEW observation should be created for the given study and observationUnit AND an NEW `observationDbId` should be assigned to it. A warning should be returned to the client. \n\n+ If an `observationDbId` is populated and found in the database and is associated with the given study and observationUnit, then it should be updated with the new data given.",
                    "endpoint": "/studies/{studyDbId}/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/putStudiesStudydbidObservationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /studies/{studyDbId}/observations",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/studies/{studyDbId0}/observations"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "The main API call for field data collection, to retrieve all the observation units within a study.",
                    "endpoint": "/studies/{studyDbId}/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudiesStudydbidObservationunitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId}/observationunits",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId0}/observationunits"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Use this call for uploading new Observations as JSON to a system.\n\nNote: If ''observationUnitDbId'' or ''observationDbId'' is populated, they should be considered updates to existing records. \nIf an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds. \nIf ''observationUnitDbId'' or ''observationDbId'' is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.",
                    "endpoint": "/studies/{studyDbId}/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/putStudiesStudydbidObservationunitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /studies/{studyDbId}/observationunits",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/studies/{studyDbId0}/observationunits"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "If ''observationUnitDbId'' or ''observationDbId'' is populated, they should be considered updates to existing records. \n\nIf an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds. \n\nIf ''observationUnitDbId'' or ''observationDbId'' is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.",
                    "endpoint": "/studies/{studyDbId}/observationunits/zip",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/postStudiesStudydbidObservationunitsZipResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /studies/{studyDbId}/observationunits/zip",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/studies/{studyDbId0}/observationunits/zip"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "List all the observation variables measured in the study.\n\nRefer to the data type definition of variables in `/Specification/ObservationVariables/README.md`.",
                    "endpoint": "/studies/{studyDbId}/observationvariables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudiesStudydbidObservationvariablesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId}/observationvariables",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId0}/observationvariables"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Retrieve the details of the study required for field data collection. Includes actual trait data.",
                    "endpoint": "/studies/{studyDbId}/table",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudiesStudydbidTableResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId}/table",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId0}/table"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "This call can be used to create new observations in bulk.\n\nNote: If you need to update any existing observation, please use `PUT /studies/{studyDbId}/observations`. This call should only be used to create NEW observations.\n\nImplementation Guidelines:\n\n+ All observations submitted through this call should create NEW observation records in the database under the given observation unit. \n\n+ Each \"observationUnitDbId\" listed should already exist in the database. If the server can not find a given \"observationUnitDbId\", it should report an error. (see Error Handling) \n\n+ The response of this call should be the set of \"observationDbIds\" created from this call, along with the associated \"observationUnitDbId\" and \"observationVariableDbId\" that each observation is associated with.\n\n+ Images can optionally be saved using this call by providing a zipped file of all images in the datafiles. The physical zipped file should be transferred as well in the mulit-part form data.",
                    "endpoint": "/studies/{studyDbId}/table",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/postStudiesStudydbidTableResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /studies/{studyDbId}/table",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/studies/{studyDbId0}/table"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Call to retrieve the list of study types.",
                    "endpoint": "/studytypes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Studies/getStudytypesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studytypes",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studytypes"
                    },
                    "requires": []
                }
            ],
            "name": "Studies"
        },
        {
            "description": "Information about Observations",
            "item": [
                {
                    "description": "Call to retrieve the list of supported observation levels. \nObservation levels indicate the granularity level at which the measurements are taken. \nThe values are used to supply the `observationLevel` parameter in the observation unit details call.",
                    "endpoint": "/observationlevels",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Observations/getObservationlevelsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationlevels",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationlevels"
                    },
                    "requires": []
                },
                {
                    "description": "Get a set of observation units",
                    "endpoint": "/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Observations/getObservationunitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationunits",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Notes: \n\nAlong with the study specific phenotype saving calls (in the observationUnit and table formats), this call allows phenotypes to be saved and images to optionally be transferred as well.\n\nCall to invoke for saving the measurements (observations) collected\\nfrom field for all the observation units.\n\nObservation timestamp should be ISO 8601 https://www.w3.org/TR/NOTE-datetime \n\nIn case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be listed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call. In this case a format parameter should be passed as well. \n\nImages can be optionally be uploaded using this call by providing a zipfile of all images in the datafiles, along with the actual zipfile in multi-part form data.\"",
                    "endpoint": "/phenotypes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Observations/postPhenotypesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /phenotypes",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/phenotypes"
                    },
                    "requires": []
                },
                {
                    "description": "Returns a list of observationUnit with the observed Phenotypes.\n\nobservationTimeStamp - Iso Standard 8601.\n\nobservationValue data type inferred from the ontology",
                    "endpoint": "/search/observationtables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Observations/postSearchObservationtablesResponse",
                                "GetValue:/result/searchResultDbId:observationtablesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/observationtables",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/observationtables"
                    },
                    "requires": []
                },
                {
                    "description": "Returns a list of observationUnit with the observed Phenotypes.\n\nobservationTimeStamp - Iso Standard 8601.\n\nobservationValue data type inferred from the ontology\n",
                    "endpoint": "/search/observationtables/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Observations/getSearchObservationtablesSearchresultsdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/observationtables/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/observationtables/{observationtablesSearchResultDbId}"
                    },
                    "requires": [
                        "observationtablesSearchResultDbId"
                    ]
                },
                {
                    "description": "Returns a list of observationUnit with the observed Phenotypes.\n\nSee Search Services for additional implementation details.\n\nUse case - this section allows to get a dataset from multiple studies. It allows to integrate data from several databases.\n\nRefactor note - This call allows to get and integrate portions of multiple phenotyping data matrixes. A proposed evolution allowed to get a list of single observations, this functionality is still possible with this call by specifybing the observation variable, see below.\n\nExample Use cases \n\n- Study a panel of germplasm accross multiple studies\n\n    '{\"germplasmDbIds\": [\"Syrah\", \"34Mtp362\"]}'\n\n- Get all data for a specific study (same as \"/studies/{studyDbId}/observationunits\")\n\n    '{\"studyDbIds\" : [\"383\"]}'\n\n- Get simple atomic phenotyping values \n\n    '{\n\n       \"germplasmDbIds\" : [ \"Syrah\", \"34Mtp362\" ], \n\n       \"observationVariableDbIds\" : [ \"CO_345:0000043\"]\n\n     }'\n\n- Study Locations for adaptation to climate change\n\n    '{\n\n       \"locationDbIds\" : [\"383838\", \"MONTPELLIER\"], \n\n       \"germplasmDbIds\" : [ \"14Mtp361\", \"24Mtp362\", \"34Mtp363\", \"44Mtp364\"]\n\n     }'\n\n- Find phenotypes that are from after a certain timestamp\n\n    '{\n\n       \"observationTimeStampRangeStart\" : \"2013-06-14T23:59:59-04:00\", \n\n       \"observationTimeStampRangeEnd\" : \"2013-06-15T23:59:59-04:00\"\n\n     }'\n     \nobservationTimeStampRangeStart and observationTimeStampRangeEnd use Iso Standard 8601.\n\nobservationValue data type inferred from the ontology",
                    "endpoint": "/search/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Observations/postSearchObservationunitsResponse",
                                "GetValue:/result/searchResultDbId:observationunitsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/observationunits",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Returns a list of observationUnit with the observed Phenotypes.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/observationunits/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Observations/getSearchObservationunitsSearchresultsdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/observationunits/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/observationunits/{observationunitsSearchResultDbId}"
                    },
                    "requires": [
                        "observationunitsSearchResultDbId"
                    ]
                }
            ],
            "name": "Observations"
        },
        {
            "description": "API to retrieve list and details of observation variables. An observation variable is composed by the unique combination of one Trait, one Method and one Scale.",
            "item": [
                {
                    "description": "Returns a list of Methods available on a server.\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/methods",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getMethodsResponse",
                                "GetValue:/result/data/0/methodDbId:methodDbId0",
                                "GetValue:/result/data/1/methodDbId:methodDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /methods",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/methods"
                    },
                    "requires": []
                },
                {
                    "description": "Create a new method object in the database",
                    "endpoint": "/methods",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/postMethodsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /methods",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/methods"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve details about a specific method\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/methods/{methodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getMethodsMethoddbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /methods/{methodDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/methods/{methodDbId0}"
                    },
                    "requires": [
                        "methodDbId0"
                    ]
                },
                {
                    "description": "Retrieve details about a specific method\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/methods/{methodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getMethodsMethoddbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /methods/{methodDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/methods/{methodDbId1}"
                    },
                    "requires": [
                        "methodDbId1"
                    ]
                },
                {
                    "description": "Update the details of an existing method",
                    "endpoint": "/methods/{methodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/putMethodsMethoddbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /methods/{methodDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/methods/{methodDbId0}"
                    },
                    "requires": [
                        "methodDbId0"
                    ]
                },
                {
                    "description": "Call to retrieve a list of observation variable ontologies available in the system.",
                    "endpoint": "/ontologies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getOntologiesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /ontologies",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/ontologies"
                    },
                    "requires": []
                },
                {
                    "description": "Returns a list of Scales available on a server.\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/scales",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getScalesResponse",
                                "GetValue:/result/data/0/scaleDbId:scaleDbId0",
                                "GetValue:/result/data/1/scaleDbId:scaleDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /scales",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/scales"
                    },
                    "requires": []
                },
                {
                    "description": "Create a new scale object in the database",
                    "endpoint": "/scales",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/postScalesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /scales",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/scales"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve details about a specific scale\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/scales/{scaleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getScalesScaledbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /scales/{scaleDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/scales/{scaleDbId0}"
                    },
                    "requires": [
                        "scaleDbId0"
                    ]
                },
                {
                    "description": "Retrieve details about a specific scale\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/scales/{scaleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getScalesScaledbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /scales/{scaleDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/scales/{scaleDbId1}"
                    },
                    "requires": [
                        "scaleDbId1"
                    ]
                },
                {
                    "description": "Update the details of an existing scale",
                    "endpoint": "/scales/{scaleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/putScalesScaledbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /scales/{scaleDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/scales/{scaleDbId0}"
                    },
                    "requires": [
                        "scaleDbId0"
                    ]
                },
                {
                    "description": "Search observation variables.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/variables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/postSearchVariablesResponse",
                                "GetValue:/result/searchResultDbId:variablesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/variables",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/variables"
                    },
                    "requires": []
                },
                {
                    "description": "Search observation variables.\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/variables/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getSearchVariablesSearchresultsdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/variables/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/variables/{variablesSearchResultDbId}"
                    },
                    "requires": [
                        "variablesSearchResultDbId"
                    ]
                },
                {
                    "description": "Call to retrieve a list of traits available in the system and their associated variables.\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/traits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getTraitsResponse",
                                "GetValue:/result/data/0/traitDbId:traitDbId0",
                                "GetValue:/result/data/1/traitDbId:traitDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /traits",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/traits"
                    },
                    "requires": []
                },
                {
                    "description": "Create a new trait object in the database",
                    "endpoint": "/traits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/postTraitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /traits",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/traits"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve the details of a single trait\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/traits/{traitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getTraitsTraitdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /traits/{traitDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/traits/{traitDbId0}"
                    },
                    "requires": [
                        "traitDbId0"
                    ]
                },
                {
                    "description": "Retrieve the details of a single trait\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/traits/{traitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getTraitsTraitdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /traits/{traitDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/traits/{traitDbId1}"
                    },
                    "requires": [
                        "traitDbId1"
                    ]
                },
                {
                    "description": "Update an existing trait",
                    "endpoint": "/traits/{traitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/putTraitsTraitdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /traits/{traitDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/traits/{traitDbId0}"
                    },
                    "requires": [
                        "traitDbId0"
                    ]
                },
                {
                    "description": "Call to retrieve a list of observationVariables available in the system.",
                    "endpoint": "/variables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getVariablesResponse",
                                "GetValue:/result/data/0/observationVariableDbId:observationVariableDbId0",
                                "GetValue:/result/data/1/observationVariableDbId:observationVariableDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variables",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variables"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve variable details",
                    "endpoint": "/variables/{observationVariableDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getVariablesObservationvariabledbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variables/{observationVariableDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variables/{observationVariableDbId0}"
                    },
                    "requires": [
                        "observationVariableDbId0"
                    ]
                },
                {
                    "description": "Retrieve variable details",
                    "endpoint": "/variables/{observationVariableDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/ObservationVariables/getVariablesObservationvariabledbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variables/{observationVariableDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variables/{observationVariableDbId1}"
                    },
                    "requires": [
                        "observationVariableDbId1"
                    ]
                }
            ],
            "name": "Observation Variables"
        },
        {
            "description": "Information about Phenotypes",
            "item": [],
            "name": "Phenotypes"
        },
        {
            "description": "Information about Germplasm",
            "item": [
                {
                    "description": "Get the list of germplasm breeding methods available in a system.",
                    "endpoint": "/breedingmethods",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getBreedingmethodsResponse",
                                "GetValue:/result/data/0/breedingMethodDbId:breedingMethodDbId0",
                                "GetValue:/result/data/1/breedingMethodDbId:breedingMethodDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /breedingmethods",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/breedingmethods"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific Breeding Method used to produce Germplasm",
                    "endpoint": "/breedingmethods/{breedingMethodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getBreedingmethodsBreedingmethoddbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /breedingmethods/{breedingMethodDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/breedingmethods/{breedingMethodDbId0}"
                    },
                    "requires": [
                        "breedingMethodDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific Breeding Method used to produce Germplasm",
                    "endpoint": "/breedingmethods/{breedingMethodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getBreedingmethodsBreedingmethoddbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /breedingmethods/{breedingMethodDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/breedingmethods/{breedingMethodDbId1}"
                    },
                    "requires": [
                        "breedingMethodDbId1"
                    ]
                },
                {
                    "description": "Addresses these needs\n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId",
                    "endpoint": "/germplasm",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getGermplasmResponse",
                                "GetValue:/result/data/0/germplasmDbId:germplasmDbId0",
                                "GetValue:/result/data/1/germplasmDbId:germplasmDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm"
                    },
                    "requires": []
                },
                {
                    "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
                    "endpoint": "/germplasm/{germplasmDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getGermplasmGermplasmdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
                    "endpoint": "/germplasm/{germplasmDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getGermplasmGermplasmdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId1}"
                    },
                    "requires": [
                        "germplasmDbId1"
                    ]
                },
                {
                    "description": "Values for all attributes by default.",
                    "endpoint": "/germplasm/{germplasmDbId}/attributes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getGermplasmGermplasmdbidAttributesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}/attributes",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}/attributes"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Retrieve the markerProfileDbIds for a given Germplasm ID",
                    "endpoint": "/germplasm/{germplasmDbId}/markerprofiles",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getGermplasmGermplasmdbidMarkerprofilesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}/markerprofiles",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}/markerprofiles"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Get all MCPD details of a germplasm\n\n<a target=\"_blank\" href=\"https://www.bioversityinternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\"> MCPD v2.1 spec can be found here </a>\n\nImplementation Notes\n\n- When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon seperated string.",
                    "endpoint": "/germplasm/{germplasmDbId}/mcpd",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getGermplasmGermplasmdbidMcpdResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}/mcpd",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}/mcpd"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Get the parentage information of a specific Germplasm",
                    "endpoint": "/germplasm/{germplasmDbId}/pedigree",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getGermplasmGermplasmdbidPedigreeResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}/pedigree",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}/pedigree"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Get the germplasmDbIds for all the Progeny of a particular germplasm.\n\nImplementation Notes\n\n- Regarding the 'parentType' field in the progeny object. Given a germplasm A having a progeny B and C, 'parentType' for progeny B refers to the 'parentType' of A toward B.",
                    "endpoint": "/germplasm/{germplasmDbId}/progeny",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getGermplasmGermplasmdbidProgenyResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}/progeny",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}/progeny"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Search for a set of germplasm based on some criteria\n\nAddresses these needs \n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId\n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/germplasm",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/postSearchGermplasmResponse",
                                "GetValue:/result/searchResultDbId:germplasmSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/germplasm",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/germplasm"
                    },
                    "requires": []
                },
                {
                    "description": "See Search Services for additional implementation details.\nAddresses these needs: 1. General germplasm search mechanism that accepts POST for complex queries 2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search 3. possibility to get MCPD details by PUID rather than dbId",
                    "endpoint": "/search/germplasm/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Germplasm/getSearchGermplasmSearchresultsdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/germplasm/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/germplasm/{germplasmSearchResultDbId}"
                    },
                    "requires": [
                        "germplasmSearchResultDbId"
                    ]
                }
            ],
            "name": "Germplasm"
        },
        {
            "description": "Information about Germplasm Attributes",
            "item": [
                {
                    "description": "List available attributes.",
                    "endpoint": "/attributes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/GermplasmAttributes/getAttributesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes"
                    },
                    "requires": []
                },
                {
                    "description": "List all available attribute categories.",
                    "endpoint": "/attributes/categories",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/GermplasmAttributes/getAttributesCategoriesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes/categories",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes/categories"
                    },
                    "requires": []
                }
            ],
            "name": "Germplasm Attributes"
        },
        {
            "description": "Information about Markers",
            "item": [
                {
                    "description": "Other service requests use the servers internal `markerDbId`. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria.\nIf there is none, an empty array is returned. If there is one or more than one match, returns an array of all marker records that match the search criteria.",
                    "endpoint": "/markers",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Markers/getMarkersResponse",
                                "GetValue:/result/data/0/markerDbId:markerDbId0",
                                "GetValue:/result/data/1/markerDbId:markerDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /markers",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/markers"
                    },
                    "requires": []
                },
                {
                    "description": "Status: ACCEPTED \nImplemented By:",
                    "endpoint": "/markers/{markerDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Markers/getMarkersMarkerdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /markers/{markerDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/markers/{markerDbId0}"
                    },
                    "requires": [
                        "markerDbId0"
                    ]
                },
                {
                    "description": "Status: ACCEPTED \nImplemented By:",
                    "endpoint": "/markers/{markerDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Markers/getMarkersMarkerdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /markers/{markerDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/markers/{markerDbId1}"
                    },
                    "requires": [
                        "markerDbId1"
                    ]
                },
                {
                    "description": "See Search Services for additional implementation details.\nOther service requests use the servers internal `markerDbId`. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. \nIf there is none, an empty array is returned. If there is one or more than one match, returns an array of all marker records that match the search criteria. '",
                    "endpoint": "/search/markers",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Markers/postSearchMarkersResponse",
                                "GetValue:/result/searchResultDbId:markersSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/markers",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/markers"
                    },
                    "requires": []
                },
                {
                    "description": "See Search Services for additional implementation details. Other service requests use the servers internal `markerDbId`. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. '",
                    "endpoint": "/search/markers/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Markers/getSearchMarkersSearchresultsdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/markers/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/markers/{markersSearchResultDbId}"
                    },
                    "requires": [
                        "markersSearchResultDbId"
                    ]
                }
            ],
            "name": "Markers"
        },
        {
            "description": "Information about Marker Profiles",
            "item": [
                {
                    "description": "This resource is used for reading and writing genomic matrices\n\nGET provides a list of available matrices, optionally filtered by study;",
                    "endpoint": "/allelematrices",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/MarkerProfiles/getAllelematricesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /allelematrices",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/allelematrices"
                    },
                    "requires": []
                },
                {
                    "description": "See Search Services for additional implementation details.\n\nThis uses a more efficient data structure and pagination for large number of markers.\n\nSee Search Services for additional implementation details.\n\nUse GET when parameter size is less than 2K bytes.\n\nThis method may support asynchronous processing.",
                    "endpoint": "/allelematrices-search",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/MarkerProfiles/getAllelematrices-searchResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /allelematrices-search",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/allelematrices-search"
                    },
                    "requires": []
                },
                {
                    "description": "See Search Services for additional implementation details.\n\nThis uses a more efficient data structure and pagination for large number of markers.\n\nUse POST when parameter size is greater than 2K bytes.\n\n- If no format is specified, this call returns the data in JSON form.\n\n- If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the \"datafiles\" field of the \"metadata\".\n\n- If more than one format is requested at a time, the server will throw a \"501 Not Implemented\" error.\n\nThe format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)'",
                    "endpoint": "/allelematrices-search",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/MarkerProfiles/postAllelematrices-searchResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /allelematrices-search",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/allelematrices-search"
                    },
                    "requires": []
                },
                {
                    "description": "For the requested Germplasm Id and/or Extract Id, returns the Markerprofile Id and number of non-missing allele calls (marker/allele pairs).",
                    "endpoint": "/markerprofiles",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/MarkerProfiles/getMarkerprofilesResponse",
                                "GetValue:/result/data/0/markerProfileDbId:markerProfileDbId0",
                                "GetValue:/result/data/1/markerProfileDbId:markerProfileDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /markerprofiles",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/markerprofiles"
                    },
                    "requires": []
                },
                {
                    "description": "For the requested marker profile ID, returns the allele call for each marker. \n        \nAllele encodings\n\n- Unknown data will by default be encoded by \\\"N\\\"\n\n- Homozygotes are returned as a single occurance, e.g. AA -> A, GG -> G\n\n- Phased heterozygotes are by default separated by a pipe (\\\"|\\\") and unphased heterozygotes are by default separated by a forward slash (\\\"/\\\")\n\n- Dominant markers such as DArTs: 1 for present, 0 for absent\n        \n- If the user would like to use an empty string (\\\"\\\") for any of the parameters, the value should be set to the reserved word \\\"empty_string\\\", e.g. sepUnphased=empty_string.\n\nOpen issue: The pages of data will need to be sorted sensibly in order for the requested page to be delivered consistently.  By map or genome position? Alphabetically?'\"",
                    "endpoint": "/markerprofiles/{markerProfileDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/MarkerProfiles/getMarkerprofilesMarkerprofiledbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /markerprofiles/{markerProfileDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/markerprofiles/{markerProfileDbId0}"
                    },
                    "requires": [
                        "markerProfileDbId0"
                    ]
                },
                {
                    "description": "For the requested marker profile ID, returns the allele call for each marker. \n        \nAllele encodings\n\n- Unknown data will by default be encoded by \\\"N\\\"\n\n- Homozygotes are returned as a single occurance, e.g. AA -> A, GG -> G\n\n- Phased heterozygotes are by default separated by a pipe (\\\"|\\\") and unphased heterozygotes are by default separated by a forward slash (\\\"/\\\")\n\n- Dominant markers such as DArTs: 1 for present, 0 for absent\n        \n- If the user would like to use an empty string (\\\"\\\") for any of the parameters, the value should be set to the reserved word \\\"empty_string\\\", e.g. sepUnphased=empty_string.\n\nOpen issue: The pages of data will need to be sorted sensibly in order for the requested page to be delivered consistently.  By map or genome position? Alphabetically?'\"",
                    "endpoint": "/markerprofiles/{markerProfileDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/MarkerProfiles/getMarkerprofilesMarkerprofiledbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /markerprofiles/{markerProfileDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/markerprofiles/{markerProfileDbId1}"
                    },
                    "requires": [
                        "markerProfileDbId1"
                    ]
                }
            ],
            "name": "Marker Profiles"
        },
        {
            "description": "Information about Genome Maps",
            "item": [
                {
                    "description": "Get list of maps",
                    "endpoint": "/maps",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/GenomeMaps/getMapsResponse",
                                "GetValue:/result/data/0/mapDbId:mapDbId0",
                                "GetValue:/result/data/1/mapDbId:mapDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps"
                    },
                    "requires": []
                },
                {
                    "description": "Provides the number of markers on each linkageGroup and the max position on the linkageGroup",
                    "endpoint": "/maps/{mapDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/GenomeMaps/getMapsMapdbidResponse",
                                "GetValue:/result/data/0/linkageGroupName:linkageGroupName0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId0}"
                    },
                    "requires": [
                        "mapDbId0"
                    ]
                },
                {
                    "description": "Provides the number of markers on each linkageGroup and the max position on the linkageGroup",
                    "endpoint": "/maps/{mapDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/GenomeMaps/getMapsMapdbidResponse",
                                "GetValue:/result/data/0/linkageGroupName:linkageGroupName0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId1}"
                    },
                    "requires": [
                        "mapDbId1"
                    ]
                },
                {
                    "description": "All the markers in a given Map, ordered by linkageGroup and position.",
                    "endpoint": "/maps/{mapDbId}/positions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/GenomeMaps/getMapsMapdbidPositionsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId}/positions",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId0}/positions"
                    },
                    "requires": [
                        "mapDbId0"
                    ]
                },
                {
                    "description": "All the markers in a specific Linkage Group (aka Chromasome) inside a particular Map, ordered by position.",
                    "endpoint": "/maps/{mapDbId}/positions/{linkageGroupName}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/GenomeMaps/getMapsMapdbidPositionsLinkagegroupnameResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId}/positions/{linkageGroupName}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId0}/positions/{linkageGroupName0}"
                    },
                    "requires": [
                        "mapDbId0",
                        "linkageGroupName0"
                    ]
                }
            ],
            "name": "Genome Maps"
        },
        {
            "description": "Information about Samples",
            "item": [
                {
                    "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.",
                    "endpoint": "/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Samples/getSamplesResponse",
                                "GetValue:/result/data/0/sampleDbId:sampleDbId0",
                                "GetValue:/result/data/1/sampleDbId:sampleDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /samples",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response.",
                    "endpoint": "/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Samples/putSamplesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /samples",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Used to retrieve the details of a single Sample from a Sample Tracking system.",
                    "endpoint": "/samples/{sampleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Samples/getSamplesSampledbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /samples/{sampleDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/samples/{sampleDbId0}"
                    },
                    "requires": [
                        "sampleDbId0"
                    ]
                },
                {
                    "description": "Used to retrieve the details of a single Sample from a Sample Tracking system.",
                    "endpoint": "/samples/{sampleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Samples/getSamplesSampledbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /samples/{sampleDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/samples/{sampleDbId1}"
                    },
                    "requires": [
                        "sampleDbId1"
                    ]
                },
                {
                    "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Samples/postSearchSamplesResponse",
                                "GetValue:/result/searchResultDbId:samplesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/samples",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/samples/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Samples/getSearchSamplesSearchresultsdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/samples/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/samples/{samplesSearchResultDbId}"
                    },
                    "requires": [
                        "samplesSearchResultDbId"
                    ]
                }
            ],
            "name": "Samples"
        },
        {
            "description": "This interface is specific to facilities that performs an external analysis, such as genotyping facilities. The interface should be implemented by that facility's server. The breeding database is the client of this interface.\nNote that to use these calls, you likely have to use the authentication call prior to connecting (see Authentication best practices).",
            "item": [
                {
                    "description": "List current available orders",
                    "endpoint": "/vendor/orders",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Vendor/getVendorOrdersResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a new order to a vendor",
                    "endpoint": "/vendor/orders",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Vendor/postVendorOrdersResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /vendor/orders",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/vendor/orders"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve the plate and sample details of an order being processed",
                    "endpoint": "/vendor/orders/{orderId}/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Vendor/getVendorOrdersOrderidPlatesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders/{orderId}/plates",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders/{orderId0}/plates"
                    },
                    "requires": [
                        "orderId0"
                    ]
                },
                {
                    "description": "Retrieve the data files generated by the vendors analysis",
                    "endpoint": "/vendor/orders/{orderId}/results",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Vendor/getVendorOrdersOrderidResultsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders/{orderId}/results",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders/{orderId0}/results"
                    },
                    "requires": [
                        "orderId0"
                    ]
                },
                {
                    "description": "Retrieve the current status of an order being processed",
                    "endpoint": "/vendor/orders/{orderId}/status",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Vendor/getVendorOrdersOrderidStatusResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders/{orderId}/status",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders/{orderId0}/status"
                    },
                    "requires": [
                        "orderId0"
                    ]
                },
                {
                    "description": "Submit a new set of Sample data",
                    "endpoint": "/vendor/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Vendor/postVendorPlatesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /vendor/plates",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/vendor/plates"
                    },
                    "requires": []
                },
                {
                    "description": "Get data for a submitted set of plates",
                    "endpoint": "/vendor/plates/{submissionId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Vendor/getVendorPlatesSubmissionidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/plates/{submissionId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/plates/{submissionId0}"
                    },
                    "requires": [
                        "submissionId0"
                    ]
                },
                {
                    "description": "Defines the plate format specification for the vendor.",
                    "endpoint": "/vendor/specifications",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Vendor/getVendorSpecificationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/specifications",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/specifications"
                    },
                    "requires": []
                }
            ],
            "name": "Vendor"
        },
        {
            "description": "Create and manipulate generic lists",
            "item": [
                {
                    "description": "Get filtered set of generic lists",
                    "endpoint": "/lists",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Lists/getListsResponse",
                                "GetValue:/result/data/0/listDbId:listDbId0",
                                "GetValue:/result/data/1/listDbId:listDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /lists",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/lists"
                    },
                    "requires": []
                },
                {
                    "description": "Create a new list",
                    "endpoint": "/lists",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Lists/postListsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /lists",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/lists"
                    },
                    "requires": []
                },
                {
                    "description": "Get a specific generic lists",
                    "endpoint": "/lists/{listDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Lists/getListsListdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /lists/{listDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/lists/{listDbId0}"
                    },
                    "requires": [
                        "listDbId0"
                    ]
                },
                {
                    "description": "Get a specific generic lists",
                    "endpoint": "/lists/{listDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Lists/getListsListdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /lists/{listDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/lists/{listDbId1}"
                    },
                    "requires": [
                        "listDbId1"
                    ]
                },
                {
                    "description": "Update an existing generic list",
                    "endpoint": "/lists/{listDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Lists/putListsListdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /lists/{listDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/lists/{listDbId0}"
                    },
                    "requires": [
                        "listDbId0"
                    ]
                },
                {
                    "description": "Add new data to a specific generic lists",
                    "endpoint": "/lists/{listDbId}/items",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Lists/postListsListdbidItemsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /lists/{listDbId}/items",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/lists/{listDbId0}/items"
                    },
                    "requires": [
                        "listDbId0"
                    ]
                }
            ],
            "name": "Lists"
        },
        {
            "description": "Create and manipulate image data",
            "item": [
                {
                    "description": "Get filtered set of image meta data\n\nImplementation Notes\n\n- 'imageURL' should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.\n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.  ",
                    "endpoint": "/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Images/getImagesResponse",
                                "GetValue:/result/data/0/imageDbId:imageDbId0",
                                "GetValue:/result/data/1/imageDbId:imageDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /images",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/images"
                    },
                    "requires": []
                },
                {
                    "description": "Create a new image meta data object\n\nImplementation Notes\n\n- 'imageURL' should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.\n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.\n\n- The `/images` calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.\n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.\n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. ",
                    "endpoint": "/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Images/postImagesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /images",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/images"
                    },
                    "requires": []
                },
                {
                    "description": "Get one image meta data object\n\nImplementation Notes\n\n- 'imageURL' should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.\n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's. ",
                    "endpoint": "/images/{imageDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Images/getImagesImagedbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /images/{imageDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/images/{imageDbId0}"
                    },
                    "requires": [
                        "imageDbId0"
                    ]
                },
                {
                    "description": "Get one image meta data object\n\nImplementation Notes\n\n- 'imageURL' should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.\n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's. ",
                    "endpoint": "/images/{imageDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Images/getImagesImagedbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /images/{imageDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/images/{imageDbId1}"
                    },
                    "requires": [
                        "imageDbId1"
                    ]
                },
                {
                    "description": "Update an image meta data object\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}/imagecontent' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \\\"imageURL\\\" as an absolute path for retrieving the image, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's. \n\n- The `/images` calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons. \n        \n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n        \n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. '",
                    "endpoint": "/images/{imageDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Images/putImagesImagedbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /images/{imageDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/images/{imageDbId0}"
                    },
                    "requires": [
                        "imageDbId0"
                    ]
                },
                {
                    "description": "Update an image with the image file content\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" for retrieving the image, wherever it happens to live.  ",
                    "endpoint": "/images/{imageDbId}/imagecontent",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Images/putImagesImagedbidImagecontentResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /images/{imageDbId}/imagecontent",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/images/{imageDbId0}/imagecontent"
                    },
                    "requires": [
                        "imageDbId0"
                    ]
                },
                {
                    "description": "Get filtered set of image meta data\n\nImplementation Notes\n\n- 'imageURL' should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.\n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.  \n\nSee Search Services for additional implementation details.",
                    "endpoint": "/search/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Images/postSearchImagesResponse",
                                "GetValue:/result/searchResultDbId:imagesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/images",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/images"
                    },
                    "requires": []
                },
                {
                    "description": "Get filtered set of image meta data\n\nImplementation Notes\n\n- 'imageURL' should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.\n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.  ",
                    "endpoint": "/search/images/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/Images/getSearchImagesSearchresultsdbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/images/{searchResultsDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/images/{imagesSearchResultDbId}"
                    },
                    "requires": [
                        "imagesSearchResultDbId"
                    ]
                }
            ],
            "name": "Images"
        },
        {
            "description": "Create and manipulate information about people",
            "item": [
                {
                    "description": "Get filtered list of people",
                    "endpoint": "/people",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/People/getPeopleResponse",
                                "GetValue:/result/data/0/personDbId:personDbId0",
                                "GetValue:/result/data/1/personDbId:personDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /people",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/people"
                    },
                    "requires": []
                },
                {
                    "description": "Create a new person",
                    "endpoint": "/people",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/People/postPeopleResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /people",
                    "parameters": [],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/people"
                    },
                    "requires": []
                },
                {
                    "description": "Get a specific person",
                    "endpoint": "/people/{personDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/People/getPeoplePersondbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /people/{personDbId}",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/people/{personDbId0}"
                    },
                    "requires": [
                        "personDbId0"
                    ]
                },
                {
                    "description": "Get a specific person",
                    "endpoint": "/people/{personDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/People/getPeoplePersondbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /people/{personDbId} with second DbId",
                    "parameters": [],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/people/{personDbId1}"
                    },
                    "requires": [
                        "personDbId1"
                    ]
                },
                {
                    "description": "Update an existing Person",
                    "endpoint": "/people/{personDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v1.3/metadata",
                                "Schema:/v1.3/People/putPeoplePersondbidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /people/{personDbId}",
                    "parameters": [],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/people/{personDbId0}"
                    },
                    "requires": [
                        "personDbId0"
                    ]
                }
            ],
            "name": "People"
        },
        {
            "description": "Authenticacte your requests",
            "item": [],
            "name": "Authentication"
        },
        {
            "description": "Deprecated Calls",
            "item": [],
            "name": "Deprecated"
        }
    ]
}