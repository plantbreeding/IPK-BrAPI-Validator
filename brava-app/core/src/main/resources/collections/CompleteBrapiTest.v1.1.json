{
	"info": {
		"name": "Complete BrAPI test",
		"description": "Includes all resources, schema and data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Calls",
			"description": "Calls resource",
			"item": [
				{
					"name": "/calls",
					"endpoint": "/calls",
					"description": "Tests schema.",
					"requires":[],
					"request": {
						"url": "{baseurl}/calls",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/calls",
								"SaveCalls:v1"
							]
						}
					]
				}
			]
		},
		{
			"name": "Germplasm",
			"description": "Germplasm resource",
			"item": [
				{
					"name": "/germplasm-search",
					"endpoint": "/germplasm-search",
					"description": "Tests schema and stores first and second germplasmDbId",
					"requires":[],
					"request": {
						"url": "{baseurl}/germplasm-search",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/germplasm-search",
								"GetValue:/result/data/0/germplasmDbId:germplasmDbId",
								"GetValue:/result/data/1/germplasmDbId:germplasmDbId1"
							]
						}
					]
				},
				{
					"name": "POST /germplasm-search",
					"endpoint": "/germplasm-search",
					"description": "Tests schema and stores first and second germplasmDbId",
					"requires":[],
					"request": {
						"url": "{baseurl}/germplasm-search",
						"method": "POST"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/germplasm-search"
							]
						}
					]
				},
				{
					"name": "/germplasm/{germplasmDbId}",
					"endpoint": "/germplasm/{germplasmDbId}",
					"description": "Tests schema using stored germplasmDbId and checks id",
					"requires":["germplasmDbId"],
					"request": {
						"url": "{baseurl}/germplasm/{germplasmDbId}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/germplasm/germplasmDbId",
								"IsEqual:/result/germplasmDbId:germplasmDbId"
							]
						}
					]
				},
				{
					"name": "/germplasm/{germplasmDbId} with second id",
					"endpoint": "/germplasm/{germplasmDbId}",
					"description": "Tests schema using second stored germplasmDbId and checks id",
					"requires":["germplasmDbId1"],
					"request": {
						"url": "{baseurl}/germplasm/{germplasmDbId1}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/germplasm/germplasmDbId",
								"IsEqual:/result/germplasmDbId:germplasmDbId1"
							]
						}
					]
				},
				{
					"name": "/germplasm/{germplasmDbId}/pedigree",
					"endpoint": "/germplasm/{germplasmDbId}/pedigree",
					"description": "Tests schema and id",
					"requires":["germplasmDbId"],
					"request": {
						"url": "{baseurl}/germplasm/{germplasmDbId}/pedigree",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/germplasm/germplasmDbId/pedigree",
								"IsEqual:/result/germplasmDbId:germplasmDbId"
							]
						}
					]
				},
				{
					"name": "/germplasm/{germplasmDbId}/markerprofiles",
					"endpoint": "/germplasm/{germplasmDbId}/markerprofiles",
					"description": "Tests schema and id",
					"requires":["germplasmDbId"],
					"request": {
						"url": "{baseurl}/germplasm/{germplasmDbId}/markerprofiles",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/germplasm/germplasmDbId/markerprofiles",
								"IsEqual:/result/germplasmDbId:germplasmDbId"
							]
						}
					]
				},
				{
					"name": "/germplasm/{germplasmDbId}/attributes",
					"endpoint": "/germplasm/{germplasmDbId}/attributes",
					"description": "Tests schema and id",
					"requires":["germplasmDbId"],
					"request": {
						"url": "{baseurl}/germplasm/{germplasmDbId}/attributes",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/germplasm/germplasmDbId/attributes",
								"IsEqual:/result/germplasmDbId:germplasmDbId"
							]
						}
					]
				}
			]
		},
		{
			"name": "Attributes",
			"description": "Attributes resource",
			"item": [
				{
					"name": "/attributes",
					"endpoint": "/attributes",
					"description": "Tests schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/attributes",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/attributes"
							]
						}
					]
				},
				{
					"name": "/attributes/categories",
					"endpoint": "/attributes/categories",
					"description": "Tests schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/attributes/categories",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/attributes/categories"
							]
						}
					]
				}
			]
		},
		{
			"name": "Markers",
			"description": "Markers resource",
			"item": [
				{
					"name": "/markers-search",
					"endpoint": "/markers-search",
					"description": "Test structure and save two Ids",
					"requires":[],
					"request": {
						"url": "{baseurl}/markers-search",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/markers-search",
								"GetValue:/result/data/0/markerDbId:markerDbId0",
								"GetValue:/result/data/1/markerDbId:markerDbId1"
							]
						}
					]
				},
				{
					"name": "POST /markers-search",
					"endpoint": "/markers-search",
					"description": "Test structure and save two Ids",
					"requires":[],
					"request": {
						"url": "{baseurl}/markers-search",
						"method": "POST"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/markers-search"
							]
						}
					]
				},
				{
					"name": "/markers/{markerDbId}",
					"endpoint": "/markers/{markerDbId}",
					"description": "",
					"requires":["markerDbId0"],
					"request": {
						"url": "{baseurl}/markers/{markerDbId0}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/markers/markerDbId",
								"IsEqual:/result/markerDbId:markerDbId0"
							]
						}
					]
				},
				{
					"name": "/markers/{markerDbId} with second id",
					"endpoint": "/markers/{markerDbId}",
					"requires":["markerDbId1"],
					"request": {
						"url": "{baseurl}/markers/{markerDbId1}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/markers/markerDbId",
								"IsEqual:/result/markerDbId:markerDbId1"
							]
						}
					]
				}
			]
		},
		{
			"name": "Markerprofiles",
			"description": "Markerprofiles resource",
			"item": [
				{
					"name": "/markerprofiles",
					"endpoint": "/markerprofiles",
					"description": "Tests markerprofile with no germplasmDbId",
					"requires":[],
					"request": {
						"url": "{baseurl}/markerprofiles",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/markerprofiles",
								"GetValue:/result/data/0/markerprofileDbId:markerprofileDbId0",
								"GetValue:/result/data/1/markerprofileDbId:markerprofileDbId1"

							]
						}
					]
				},
				{
					"name": "/markerprofiles with specific germplasmDbId",
					"endpoint": "/markerprofiles",
					"description": "Tests markerprofile with germplasmDbId",
					"requires":["germplasmDbId"],
					"request": {
						"url": "{baseurl}/markerprofiles",
						"method": "GET"
					},
					"parameters": [
						{
							"param": "germplasmDbId",
							"value": "{germplasmDbId}"
						}
					],
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/markerprofiles",
								"IsEqual:/result/data/0/germplasmDbId:germplasmDbId"
							]
						}
					]
				},
				{
					"name": "/markerprofiles/{markerprofileDbId}",
					"endpoint": "/markerprofiles/{markerprofileDbId}",
					"description": "Test schema and same id",
					"requires":["markerprofileDbId0"],
					"request": {
						"url": "{baseurl}/markerprofiles/{markerprofileDbId0}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/markerprofiles/markerprofileDbId",
								"IsEqual:/result/markerprofileDbId:markerprofileDbId0"
							]
						}
					]
				},
				{
					"name": "/markerprofiles/{markerprofileDbId} with second id",
					"endpoint": "/markerprofiles/{markerprofileDbId}",
					"description": "Test schema and same id for second stored id",
					"requires":["markerprofileDbId1"],
					"request": {
						"url": "{baseurl}/markerprofiles/{markerprofileDbId1}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/markerprofiles/markerprofileDbId",
								"IsEqual:/result/markerprofileDbId:markerprofileDbId1"
							]
						}
					]
				},
				{
					"name": "/allelematrix-search with markerprofileDbId",
					"endpoint": "/allelematrix-search",
					"description": "Test schema",
					"requires":["markerprofileDbId0"],
					"request": {
						"url": "{baseurl}/allelematrix-search",
						"method": "GET"
					},
					"parameters": [
						{
							"param": "markerprofileDbId",
							"value": "{markerprofileDbId0}"
						}
					],
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/allelematrix-search"
							]
						}
					]
				},
				{
					"name": "/allelematrix-search POST with markerprofileDbId",
					"endpoint": "/allelematrix-search",
					"description": "Test schema for POST",
					"requires":["markerprofileDbId0"],
					"request": {
						"url": "{baseurl}/allelematrix-search",
						"method": "POST"
					},
					"parameters": [
						{
							"param": "json",
							"value": "{\"markerprofileDbId\": ${markerprofileDbId0}}"
						}
					],
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/allelematrix-search"
							]
						}
					]
				}
			]
		},
		{
			"name": "Programs",
			"description": "Programs resource",
			"item": [
				{
					"name": "/programs",
					"endpoint": "/programs",
					"description": "Test schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/programs",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/programs"
							]
						}
					]
				}
			]
		},
		{
			"name": "Crops",
			"description": "Crops resource",
			"item": [
				{
					"name": "/crops",
					"endpoint": "/crops",
					"description": "tests schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/crops",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/crops"
							]
						}
					]
				}
			]
		},
		{
			"name": "Trials",
			"description": "Trials resource",
			"item": [
				{
					"name": "/trials",
					"endpoint": "/trials",
					"description": "Test schema and save two Ids",
					"requires":[],
					"request": {
						"url": "{baseurl}/trials",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/trials",
								"GetValue:/result/data/0/trialDbId:trialDbId0",
								"GetValue:/result/data/1/trialDbId:trialDbId1"
							]
						}
					]
				},
				{
					"name": "/trials/{trialDbId}",
					"endpoint": "/trials/{trialDbId}",
					"description": "Test schema and check first id",
					"requires":["trialDbId0"],
					"request": {
						"url": "{baseurl}/trials/{trialDbId0}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/trials/trialDbId",
								"IsEqual:/result/trialDbId:trialDbId0"
							]
						}
					]
				},
				{
					"name": "/trials/{trialDbId} with second id",
					"endpoint": "/trials/{trialDbId}",
					"description": "Test schema and check second id",
					"requires":["trialDbId1"],
					"request": {
						"url": "{baseurl}/trials/{trialDbId1}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/trials/trialDbId",
								"IsEqual:/result/trialDbId:trialDbId1"
							]
						}
					]
				}
			]
		},
		{
			"name": "Studies",
			"description": "Studies resources",
			"item": [
				{
					"name": "/seasons",
					"endpoint": "/seasons",
					"description": "Test schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/seasons",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/seasons"
							]
						}
					]
				},
				{
					"name": "/studytypes",
					"endpoint": "/studytypes",
					"description": "Test schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/studytypes",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studytypes"
							]
						}
					]
				},
				{
					"name": "/studies-search",
					"endpoint": "/studies-search",
					"description": "Search with no parameters and save two ids",
					"requires":[],
					"request": {
						"url": "{baseurl}/studies-search",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studies-search",
								"GetValue:/result/data/0/studyDbId:studyDbId0",
								"GetValue:/result/data/1/studyDbId:studyDbId1"
							]
						}
					]
				},
				{
					"name": "/studies/{studyDbId}",
					"endpoint": "/studies/{studyDbId}",
					"description": "Check schema and Id",
					"requires":["studyDbId0"],
					"request": {
						"url": "{baseurl}/studies/{studyDbId0}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studies/studyDbId",
								"IsEqual:/result/studyDbId:studyDbId0"
							]
						}
					]
				},
				{
					"name": "/studies/{studyDbId} with second id",
					"endpoint": "/studies/{studyDbId}",
					"description": "Check schema and second Id",
					"requires":["studyDbId1"],
					"request": {
						"url": "{baseurl}/studies/{studyDbId1}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studies/studyDbId",
								"IsEqual:/result/studyDbId:studyDbId1"
							]
						}
					]
				},
				{
					"name": "/studies/{studyDbId}/observationvariables",
					"endpoint": "/studies/{studyDbId}/observationvariables",
					"description": "Check schema and id",
					"requires":["studyDbId0"],
					"request": {
						"url": "{baseurl}/studies/{studyDbId0}/observationvariables",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studies/studyDbId/observationvariables",
								"IsEqual:/result/studyDbId:studyDbId0",
								"GetValue:/result/data/0/observationVariableDbId:observationVariableDbId"
							]
						}
					]
				},
				{
					"name": "/studies/{studyDbId}/germplasm",
					"endpoint": "/studies/{studyDbId}/germplasm",
					"description": "Check schema and id",
					"requires":["studyDbId0"],
					"request": {
						"url": "{baseurl}/studies/{studyDbId0}/germplasm",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studies/studyDbId/germplasm",
								"IsEqual:/result/studyDbId:studyDbId0"
							]
						}
					]
				},
				{
					"name": "/observationlevels",
					"endpoint": "/observationlevels",
					"description": "Check schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/observationlevels",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/observationlevels"
							]
						}
					]
				},
				{
					"name": "/studies/{studyDbId}/observationunits",
					"endpoint": "/studies/{studyDbId}/observationunits",
					"description": "Check schema",
					"requires":["studyDbId0"],
					"request": {
						"url": "{baseurl}/studies/{studyDbId0}/observationunits",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studies/studyDbId/observationunits"
							]
						}
					]
				},
				{
					"name": "/studies/{studyDbId}/table",
					"endpoint": "/studies/{studyDbId}/table",
					"description": "Check schema and id",
					"requires":["studyDbId0"],
					"request": {
						"url": "{baseurl}/studies/{studyDbId0}/table",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studies/studyDbId/table"
							]
						}
					]
				},
				{
					"name": "/studies/{studyDbId}/layout",
					"endpoint": "/studies/{studyDbId}/layout",
					"description": "Check schema",
					"requires":["studyDbId0"],
					"request": {
						"url": "{baseurl}/studies/{studyDbId0}/layout",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studies/studyDbId/layout",
								"IsEqual:/result/data/0/studyDbId:studyDbId0"
							]
						}
					]
				},
				{
					"name": "/studies/{studyDbId}/observations with observationVariableDbId",
					"endpoint": "/studies/{studyDbId}/observations",
					"description": "Check schema and id",
					"requires":["studyDbId0", "observationVariableDbId"],
					"request": {
						"url": "{baseurl}/studies/{studyDbId0}/observations",
						"method": "GET"
					},
					"parameters": [
						{
							"param": "observationVariableDbId",
							"value": "{observationVariableDbId}"
						}
					],
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/studies/studyDbId/observations",
								"IsEqual:/result/data/0/studyDbId:studyDbId0",
								"IsEqual:/result/data/0/observationVariableDbId:observationVariableDbId"
							]
						}
					]
				}
			]
		},
		{
			"name": "Phenotypes",
			"description": "Phenotypes resource",
			"item": [
				{
					"name": "/phenotypes-search",
					"endpoint": "/phenotypes-search",
					"description": "Check schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/phenotypes-search",
						"method": "POST"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/phenotypes-search"
							]
						}
					]
				}
			]
		},
		{
			"name": "Traits",
			"description": "Traits resource",
			"item": [
				{
					"name": "/traits",
					"endpoint": "/traits",
					"description": "Check schema and save two ids",
					"requires":[],
					"request": {
						"url": "{baseurl}/traits",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/traits",
								"GetValue:/result/data/0/traitDbId:traitDbId0",
								"GetValue:/result/data/1/traitDbId:traitDbId1"
							]
						}
					]
				},
				{
					"name": "/traits/{traitDbId}",
					"endpoint": "/traits/{traitDbId}",
					"description": "Check schema and first id",
					"requires":["traitDbId0"],
					"request": {
						"url": "{baseurl}/traits/{traitDbId0}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/traits/traitDbId",
								"IsEqual:/result/traitDbId:traitDbId0"
							]
						}
					]
				},
				{
					"name": "/traits/{traitDbId} with second id",
					"endpoint": "/traits/{traitDbId}",
					"description": "Check schema and second id",
					"requires":["traitDbId1"],
					"request": {
						"url": "{baseurl}/traits/{traitDbId1}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/traits/traitDbId",
								"IsEqual:/result/traitDbId:traitDbId1"
							]
						}
					]
				}
			]
		},
		{
			"name": "Observation Variables",
			"description": "Observation Variables resource",
			"item": [
				{
					"name": "/variables/datatypes",
					"endpoint": "/variables/datatypes",
					"description": "Check schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/variables/datatypes",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/variables/datatypes"
							]
						}
					]
				},
				{
					"name": "/variables",
					"endpoint": "/variables",
					"description": "Check schema and store two variables",
					"requires":[],
					"request": {
						"url": "{baseurl}/variables",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/variables",
								"GetValue:/result/data/0/observationVariableDbId:observationVariableDbId2",
								"GetValue:/result/data/0/observationVariableDbId:observationVariableDbId3"
							]
						}
					]
				},
				{
					"name": "/variables/{observationVariableDbId}",
					"endpoint": "/variables/{observationVariableDbId}",
					"description": "Check schema and id",
					"requires":["observationVariableDbId2"],
					"request": {
						"url": "{baseurl}/variables/{observationVariableDbId2}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/variables/observationVariableDbId",
								"IsEqual:/result/observationVariableDbId:observationVariableDbId2"
							]
						}
					]
				},
				{
					"name": "/variables/{observationVariableDbId} with second id",
					"endpoint": "/variables/{observationVariableDbId}",
					"description": "Check schema and second id",
					"requires":["observationVariableDbId3"],
					"request": {
						"url": "{baseurl}/variables/{observationVariableDbId3}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/variables/observationVariableDbId",
								"IsEqual:/result/observationVariableDbId:observationVariableDbId3"
							]
						}
					]
				},
				{
					"name": "/ontologies",
					"endpoint": "/ontologies",
					"description": "Check schema",
					"requires":[],
					"request": {
						"url": "{baseurl}/ontologies",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/ontologies"
							]
						}
					]
				}
			]
		},
		{
			"name": "Genomic maps",
			"description": "Genomic maps resource",
			"item": [
				{
					"name": "/maps",
					"endpoint": "/maps",
					"description": "Schema and store id",
					"requires":[],
					"request": {
						"url": "{baseurl}/maps",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/maps",
								"GetValue:/result/data/0/mapDbId:mapDbId"
							]
						}
					]
				},
				{
					"name": "/maps/{mapDbId}",
					"endpoint": "/maps/{mapDbId}",
					"description": "Schema and id check",
					"requires":["mapDbId"],
					"request": {
						"url": "{baseurl}/maps/{mapDbId}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/maps/mapDbId",
								"IsEqual:/result/mapDbId:mapDbId"
							]
						}
					]
				},
				{
					"name": "/maps/{mapDbId}/positions",
					"endpoint": "/maps/{mapDbId}/positions",
					"description": "Schema and id check",
					"requires":["mapDbId"],
					"request": {
						"url": "{baseurl}/maps/{mapDbId}/positions",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/maps/mapDbId/positions",
								"GetValue:/result/data/0/linkageGroupName:linkageGroupName"
							]
						}
					]
				},
				{
					"name": "/maps/{mapDbId}/positions/{linkageGroupName}",
					"endpoint": "/maps/{mapDbId}/positions/{linkageGroupName}",
					"description": "Schema and id check",
					"requires":["mapDbId", "linkageGroupName"],
					"request": {
						"url": "{baseurl}/maps/{mapDbId}/positions/{linkageGroupName}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/maps/mapDbId/positions/linkageGroupId"
							]
						}
					]
				}
			]
		},
		{
			"name": "Locations",
			"description": "Locations resource",
			"item": [
				{
					"name": "/locations",
					"endpoint": "/locations",
					"description": "Check schema and store id",
					"requires":[],
					"request": {
						"url": "{baseurl}/locations",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/locations",
								"GetValue:/result/data/0/locationDbId:locationDbId"
							]
						}
					]
				},
				{
					"name": "/locations/{locationDbId}",
					"endpoint": "/locations/{locationDbId}",
					"description": "Check schema and id",
					"requires":["locationDbId"],
					"request": {
						"url": "{baseurl}/locations/{locationDbId}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/locationsDbId",
								"IsEqual:/result/locationDbId:locationDbId"
							]
						}
					]
				}
			]
		},
		{
			"name": "Samples",
			"description": "Samples resource",
			"item": [
				{
					"name": "/samples-search",
					"endpoint": "/samples-search",
					"description": "Check schema and store id",
					"requires":[],
					"request": {
						"url": "{baseurl}/samples-search",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/samples-search",
								"GetValue:/result/data/0/sampleDbId:sampleDbId"
							]
						}
					]
				},
				{
					"name": "POST /samples-search",
					"endpoint": "/samples-search",
					"description": "Check schema and store id",
					"requires":[],
					"request": {
						"url": "{baseurl}/samples-search",
						"method": "POST"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/samples-search"
							]
						}
					]
				},
				{
					"name": "/samples/{sampleDbId}",
					"endpoint": "/samples/{sampleDbId}",
					"description": "Check schema and id",
					"requires":["sampleDbId"],
					"request": {
						"url": "{baseurl}/samples/{sampleDbId}",
						"method": "GET"
					},
					"event": [
						{
							"listen": "test",
							"type": "text/plain",
							"exec": [
								"StatusCode:200:breakiffalse",
								"ContentType:application/json",
								"Schema:/v1.1/metadata",
								"Schema:/v1.1/samples/sampleDbId",
								"IsEqual:/result/sampleDbId:sampleDbId"
							]
						}
					]
				}
			]
		}
	]
}
