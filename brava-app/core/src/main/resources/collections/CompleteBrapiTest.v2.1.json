{
    "info": {
        "description": "Includes all resources, schema and data",
        "name": "Complete BrAPI test",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "description": "Check the available calls on a server",
            "item": [
                {
                    "description": "Implementation Notes\n\nHaving a consistent structure for the path string of each call is very \nimportant for teams to be able to connect and find errors. Read more on Github.\n\nHere are the rules for the path of each call that should be returned\n\nEvery word in the call path should match the documentation exactly, both in \nspelling and capitalization. Note that path strings are all lower case, but \npath parameters are camel case.\n\nEach path should start relative to \\\"/\\\" and therefore should not include \\\"/\\\"\n\nNo leading or trailing slashes (\\\"/\\\") \n\nPath parameters are wrapped in curly braces (\\\"{}\\\"). The name of the path parameter \nshould be spelled exactly as it is specified in the documentation.\n\nExamples \n\nGOOD   \"call\": \"germplasm/{germplasmDbId}/pedigree\" \n\nBAD    \"call\": \"germplasm/{id}/pedigree\"\n\nBAD    \"call\": \"germplasm/{germplasmDBid}/pedigree\" \n\nBAD    \"call\": \"brapi/v2/germplasm/{germplasmDbId}/pedigree\" \n\nBAD    \"call\": \"/germplasm/{germplasmDbId}/pedigree/\" \n\nBAD    \"call\": \"germplasm/<germplasmDbId>/pedigree\"",
                    "endpoint": "/serverinfo",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ServerInfo/getServerinfoResponse",
                                "SaveCalls:V2"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /serverinfo",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/serverinfo"
                    },
                    "requires": []
                }
            ],
            "name": "Server Info"
        },
        {
            "description": "Information about Common Crop Names",
            "item": [
                {
                    "description": "List the common crop names for the crops available in a database server. \n\nThis call is ** required ** for multi-crop systems where data from multiple \ncrops may be stored in the same database server. A distinct database server \nis defined by everything in the URL before \"/brapi/v2\", including host \nname and base path.\n\nThis call is recommended for single crop systems to be compatible with \nmulti-crop clients. For a single crop system the response should contain \nan array with exactly 1 element. \n\nThe common crop name can be used as a search parameter for Programs, \nStudies, and Germplasm.",
                    "endpoint": "/commoncropnames",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CommonCropNames/getCommoncropnamesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /commoncropnames",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/commoncropnames"
                    },
                    "requires": []
                }
            ],
            "name": "Common Crop Names"
        },
        {
            "description": "Information about Programs",
            "item": [
                {
                    "description": "Get a filtered list of breeding Programs. This list can be filtered by common crop name to narrow results to a specific crop.",
                    "endpoint": "/programs",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Programs/getProgramsResponse",
                                "GetValue:/result/data/0/programDbId:programDbId0",
                                "GetValue:/result/data/1/programDbId:programDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /programs",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/programs"
                    },
                    "requires": []
                },
                {
                    "description": "Get a single breeding Program by Id. This can be used to quickly get the details of a Program when you have the Id from another entity.",
                    "endpoint": "/programs/{programDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Programs/getProgramsProgramdbidResponse",
                                "IsEqual:/result/programDbId:programDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /programs/{programDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/programs/{programDbId0}"
                    },
                    "requires": [
                        "programDbId0"
                    ]
                },
                {
                    "description": "Get a single breeding Program by Id. This can be used to quickly get the details of a Program when you have the Id from another entity.",
                    "endpoint": "/programs/{programDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Programs/getProgramsProgramdbidResponse",
                                "IsEqual:/result/programDbId:programDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /programs/{programDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/programs/{programDbId1}"
                    },
                    "requires": [
                        "programDbId1"
                    ]
                },
                {
                    "description": "Add new breeding Programs to the database. The `programDbId` is set by the server, all other fields are take from the request body, or a default value is used.",
                    "endpoint": "/programs",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Programs/postProgramsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /programs",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/programs"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of an existing breeding Program.",
                    "endpoint": "/programs/{programDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Programs/putProgramsProgramdbidResponse",
                                "IsEqual:/result/programDbId:programDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /programs/{programDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/programs/{programDbId0}"
                    },
                    "requires": [
                        "programDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `Programs`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/programs/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/programs",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Programs/postSearchProgramsResponse:programsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/programs",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/programs"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Programs` search request <br/>\nClients should submit a search request using the corresponding `POST /search/programs` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/programs/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Programs/getSearchProgramsSearchresultsdbidResponse:programsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/programs/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/programs/{programsSearchResultDbId}"
                    },
                    "requires": [
                        "programsSearchResultDbId"
                    ]
                }
            ],
            "name": "Programs"
        },
        {
            "description": "Information about Trials",
            "item": [
                {
                    "description": "Retrieve a filtered list of breeding Trials. A Trial is a collection of Studies",
                    "endpoint": "/trials",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Trials/getTrialsResponse",
                                "GetValue:/result/data/0/trialDbId:trialDbId0",
                                "GetValue:/result/data/1/trialDbId:trialDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /trials",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/trials"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific Trial",
                    "endpoint": "/trials/{trialDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Trials/getTrialsTrialdbidResponse",
                                "IsEqual:/result/trialDbId:trialDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /trials/{trialDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/trials/{trialDbId0}"
                    },
                    "requires": [
                        "trialDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific Trial",
                    "endpoint": "/trials/{trialDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Trials/getTrialsTrialdbidResponse",
                                "IsEqual:/result/trialDbId:trialDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /trials/{trialDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/trials/{trialDbId1}"
                    },
                    "requires": [
                        "trialDbId1"
                    ]
                },
                {
                    "description": "Create new breeding Trials. A Trial represents a collection of related Studies. `trialDbId` is generated by the server.",
                    "endpoint": "/trials",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Trials/postTrialsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /trials",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/trials"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of an existing Trial",
                    "endpoint": "/trials/{trialDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Trials/putTrialsTrialdbidResponse",
                                "IsEqual:/result/trialDbId:trialDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /trials/{trialDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/trials/{trialDbId0}"
                    },
                    "requires": [
                        "trialDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `Trials`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/trials/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/trials",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Trials/postSearchTrialsResponse:trialsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/trials",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/trials"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Trials` search request <br/>\nClients should submit a search request using the corresponding `POST /search/trials` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/trials/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Trials/getSearchTrialsSearchresultsdbidResponse:trialsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/trials/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/trials/{trialsSearchResultDbId}"
                    },
                    "requires": [
                        "trialsSearchResultDbId"
                    ]
                }
            ],
            "name": "Trials"
        },
        {
            "description": "Information about Studies",
            "item": [
                {
                    "description": "Get list of studies\n\nStartDate and endDate should be ISO-8601 format for dates",
                    "endpoint": "/studies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Studies/getStudiesResponse",
                                "GetValue:/result/data/0/studyDbId:studyDbId0",
                                "GetValue:/result/data/1/studyDbId:studyDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve the information of the study required for field data collection\n\nAn additionalInfo field was added to provide a controlled vocabulary for less common data fields.",
                    "endpoint": "/studies/{studyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Studies/getStudiesStudydbidResponse",
                                "IsEqual:/result/studyDbId:studyDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId0}"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Retrieve the information of the study required for field data collection\n\nAn additionalInfo field was added to provide a controlled vocabulary for less common data fields.",
                    "endpoint": "/studies/{studyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Studies/getStudiesStudydbidResponse",
                                "IsEqual:/result/studyDbId:studyDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studies/{studyDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studies/{studyDbId1}"
                    },
                    "requires": [
                        "studyDbId1"
                    ]
                },
                {
                    "description": "Call to retrieve the list of study types.",
                    "endpoint": "/studytypes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Studies/getStudytypesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /studytypes",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/studytypes"
                    },
                    "requires": []
                },
                {
                    "description": "Create new studies\n\nImplementation Notes\n\nStartDate and endDate should be ISO-8601 format for dates\n\n`studDbId` is generated by the server.",
                    "endpoint": "/studies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Studies/postStudiesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /studies",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/studies"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Study with new data",
                    "endpoint": "/studies/{studyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Studies/putStudiesStudydbidResponse",
                                "IsEqual:/result/studyDbId:studyDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /studies/{studyDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/studies/{studyDbId0}"
                    },
                    "requires": [
                        "studyDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `Studies`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/studies/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/studies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Studies/postSearchStudiesResponse:studiesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/studies",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/studies"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Studies` search request <br/>\nClients should submit a search request using the corresponding `POST /search/studies` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/studies/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Studies/getSearchStudiesSearchresultsdbidResponse:studiesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/studies/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/studies/{studiesSearchResultDbId}"
                    },
                    "requires": [
                        "studiesSearchResultDbId"
                    ]
                }
            ],
            "name": "Studies"
        },
        {
            "description": "Information about Locations",
            "item": [
                {
                    "description": "Get a list of locations.\n* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n* `altitude` is in meters.",
                    "endpoint": "/locations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Locations/getLocationsResponse",
                                "GetValue:/result/data/0/locationDbId:locationDbId0",
                                "GetValue:/result/data/1/locationDbId:locationDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /locations",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/locations"
                    },
                    "requires": []
                },
                {
                    "description": "Get details for a location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
                    "endpoint": "/locations/{locationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Locations/getLocationsLocationdbidResponse",
                                "IsEqual:/result/locationDbId:locationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /locations/{locationDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/locations/{locationDbId0}"
                    },
                    "requires": [
                        "locationDbId0"
                    ]
                },
                {
                    "description": "Get details for a location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
                    "endpoint": "/locations/{locationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Locations/getLocationsLocationdbidResponse",
                                "IsEqual:/result/locationDbId:locationDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /locations/{locationDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/locations/{locationDbId1}"
                    },
                    "requires": [
                        "locationDbId1"
                    ]
                },
                {
                    "description": "Add new locations to database\n* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n* `altitude` is in meters.",
                    "endpoint": "/locations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Locations/postLocationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /locations",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/locations"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details for an existing location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
                    "endpoint": "/locations/{locationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Locations/putLocationsLocationdbidResponse",
                                "IsEqual:/result/locationDbId:locationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /locations/{locationDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/locations/{locationDbId0}"
                    },
                    "requires": [
                        "locationDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `Locations`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/locations/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/locations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Locations/postSearchLocationsResponse:locationsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/locations",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/locations"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Locations` search request <br/>\nClients should submit a search request using the corresponding `POST /search/location` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/locations/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Locations/getSearchLocationsSearchresultsdbidResponse:locationsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/locations/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/locations/{locationsSearchResultDbId}"
                    },
                    "requires": [
                        "locationsSearchResultDbId"
                    ]
                }
            ],
            "name": "Locations"
        },
        {
            "description": "Information about Seasons",
            "item": [
                {
                    "description": "Call to retrieve all seasons in the database.\n\nA season is made of 2 parts; the primary year and a term which defines a segment of the year. \nThis could be a traditional season, like \"Spring\" or \"Summer\" or this could be a month, like \n\"May\" or \"June\" or this could be an arbitrary season name which is meaningful to the breeding \nprogram like \"PlantingTime_3\" or \"Season E\"",
                    "endpoint": "/seasons",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Seasons/getSeasonsResponse",
                                "GetValue:/result/data/0/seasonDbId:seasonDbId0",
                                "GetValue:/result/data/1/seasonDbId:seasonDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seasons",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seasons"
                    },
                    "requires": []
                },
                {
                    "description": "Get the a single Season",
                    "endpoint": "/seasons/{seasonDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Seasons/getSeasonsSeasondbidResponse",
                                "IsEqual:/result/seasonDbId:seasonDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seasons/{seasonDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seasons/{seasonDbId0}"
                    },
                    "requires": [
                        "seasonDbId0"
                    ]
                },
                {
                    "description": "Get the a single Season",
                    "endpoint": "/seasons/{seasonDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Seasons/getSeasonsSeasondbidResponse",
                                "IsEqual:/result/seasonDbId:seasonDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seasons/{seasonDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seasons/{seasonDbId1}"
                    },
                    "requires": [
                        "seasonDbId1"
                    ]
                },
                {
                    "description": "Add new season entries to the database",
                    "endpoint": "/seasons",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Seasons/postSeasonsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /seasons",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/seasons"
                    },
                    "requires": []
                },
                {
                    "description": "Update existing Seasons",
                    "endpoint": "/seasons/{seasonDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Seasons/putSeasonsSeasondbidResponse",
                                "IsEqual:/result/seasonDbId:seasonDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /seasons/{seasonDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/seasons/{seasonDbId0}"
                    },
                    "requires": [
                        "seasonDbId0"
                    ]
                }
            ],
            "name": "Seasons"
        },
        {
            "description": "Information about People",
            "item": [
                {
                    "description": "Get filtered list of people",
                    "endpoint": "/people",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/People/getPeopleResponse",
                                "GetValue:/result/data/0/personDbId:personDbId0",
                                "GetValue:/result/data/1/personDbId:personDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /people",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/people"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details for a specific Person",
                    "endpoint": "/people/{personDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/People/getPeoplePersondbidResponse",
                                "IsEqual:/result/personDbId:personDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /people/{personDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/people/{personDbId0}"
                    },
                    "requires": [
                        "personDbId0"
                    ]
                },
                {
                    "description": "Get the details for a specific Person",
                    "endpoint": "/people/{personDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/People/getPeoplePersondbidResponse",
                                "IsEqual:/result/personDbId:personDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /people/{personDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/people/{personDbId1}"
                    },
                    "requires": [
                        "personDbId1"
                    ]
                },
                {
                    "description": "Create new People entities. `personDbId` is generated and managed by the server.",
                    "endpoint": "/people",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/People/postPeopleResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /people",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/people"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Person",
                    "endpoint": "/people/{personDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/People/putPeoplePersondbidResponse",
                                "IsEqual:/result/personDbId:personDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /people/{personDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/people/{personDbId0}"
                    },
                    "requires": [
                        "personDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `People`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/people/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/people",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/People/postSearchPeopleResponse:peopleSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/people",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/people"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `People` search request <br/>\nClients should submit a search request using the corresponding `POST /search/people` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/people/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/People/getSearchPeopleSearchresultsdbidResponse:peopleSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/people/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/people/{peopleSearchResultDbId}"
                    },
                    "requires": [
                        "peopleSearchResultDbId"
                    ]
                }
            ],
            "name": "People"
        },
        {
            "description": "Information about Lists",
            "item": [
                {
                    "description": "Get filtered set of generic lists",
                    "endpoint": "/lists",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Lists/getListsResponse",
                                "GetValue:/result/data/0/listDbId:listDbId0",
                                "GetValue:/result/data/1/listDbId:listDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /lists",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/lists"
                    },
                    "requires": []
                },
                {
                    "description": "Get a specific generic lists",
                    "endpoint": "/lists/{listDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Lists/getListsListdbidResponse",
                                "IsEqual:/result/listDbId:listDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /lists/{listDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/lists/{listDbId0}"
                    },
                    "requires": [
                        "listDbId0"
                    ]
                },
                {
                    "description": "Get a specific generic lists",
                    "endpoint": "/lists/{listDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Lists/getListsListdbidResponse",
                                "IsEqual:/result/listDbId:listDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /lists/{listDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/lists/{listDbId1}"
                    },
                    "requires": [
                        "listDbId1"
                    ]
                },
                {
                    "description": "Create new list objects in the database",
                    "endpoint": "/lists",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Lists/postListsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /lists",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/lists"
                    },
                    "requires": []
                },
                {
                    "description": "Add new data members to a specific List",
                    "endpoint": "/lists/{listDbId}/data",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Lists/postListsListdbidDataResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /lists/{listDbId}/data",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/lists/{listDbId0}/data"
                    },
                    "requires": [
                        "listDbId0"
                    ]
                },
                {
                    "description": "Update an existing generic list",
                    "endpoint": "/lists/{listDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Lists/putListsListdbidResponse",
                                "IsEqual:/result/listDbId:listDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /lists/{listDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/lists/{listDbId0}"
                    },
                    "requires": [
                        "listDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for Lists <br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/lists/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/lists",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Lists/postSearchListsResponse:listsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/lists",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/lists"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `List` search request <br/>\nClients should submit a search request using the corresponding `POST /search/lists` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/lists/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Lists/getSearchListsSearchresultsdbidResponse:listsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/lists/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/lists/{listsSearchResultDbId}"
                    },
                    "requires": [
                        "listsSearchResultDbId"
                    ]
                }
            ],
            "name": "Lists"
        },
        {
            "description": "Information about Germplasm",
            "item": [
                {
                    "description": "Get the list of germplasm breeding methods available in a system.",
                    "endpoint": "/breedingmethods",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Germplasm/getBreedingmethodsResponse",
                                "GetValue:/result/data/0/breedingMethodDbId:breedingMethodDbId0",
                                "GetValue:/result/data/1/breedingMethodDbId:breedingMethodDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /breedingmethods",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/breedingmethods"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific Breeding Method used to produce Germplasm",
                    "endpoint": "/breedingmethods/{breedingMethodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Germplasm/getBreedingmethodsBreedingmethoddbidResponse",
                                "IsEqual:/result/breedingMethodDbId:breedingMethodDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /breedingmethods/{breedingMethodDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/breedingmethods/{breedingMethodDbId0}"
                    },
                    "requires": [
                        "breedingMethodDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific Breeding Method used to produce Germplasm",
                    "endpoint": "/breedingmethods/{breedingMethodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Germplasm/getBreedingmethodsBreedingmethoddbidResponse",
                                "IsEqual:/result/breedingMethodDbId:breedingMethodDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /breedingmethods/{breedingMethodDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/breedingmethods/{breedingMethodDbId1}"
                    },
                    "requires": [
                        "breedingMethodDbId1"
                    ]
                },
                {
                    "description": "Addresses these needs\n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId",
                    "endpoint": "/germplasm",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Germplasm/getGermplasmResponse",
                                "GetValue:/result/data/0/germplasmDbId:germplasmDbId0",
                                "GetValue:/result/data/1/germplasmDbId:germplasmDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm"
                    },
                    "requires": []
                },
                {
                    "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
                    "endpoint": "/germplasm/{germplasmDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Germplasm/getGermplasmGermplasmdbidResponse",
                                "IsEqual:/result/germplasmDbId:germplasmDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
                    "endpoint": "/germplasm/{germplasmDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Germplasm/getGermplasmGermplasmdbidResponse",
                                "IsEqual:/result/germplasmDbId:germplasmDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId1}"
                    },
                    "requires": [
                        "germplasmDbId1"
                    ]
                },
                {
                    "description": "Get all MCPD details of a germplasm\n\n<a target=\"_blank\" href=\"https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\"> MCPD v2.1 spec can be found here </a>\n\nImplementation Notes\n\n- When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.",
                    "endpoint": "/germplasm/{germplasmDbId}/mcpd",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Germplasm/getGermplasmGermplasmdbidMcpdResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /germplasm/{germplasmDbId}/mcpd",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}/mcpd"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Create new Germplasm entities on this server",
                    "endpoint": "/germplasm",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Germplasm/postGermplasmResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /germplasm",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/germplasm"
                    },
                    "requires": []
                },
                {
                    "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
                    "endpoint": "/germplasm/{germplasmDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Germplasm/putGermplasmGermplasmdbidResponse",
                                "IsEqual:/result/germplasmDbId:germplasmDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /germplasm/{germplasmDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/germplasm/{germplasmDbId0}"
                    },
                    "requires": [
                        "germplasmDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `Germplasm`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/germplasm",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Germplasm/postSearchGermplasmResponse:germplasmSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/germplasm",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/germplasm"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Germplasm` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasm` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/germplasm/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Germplasm/getSearchGermplasmSearchresultsdbidResponse:germplasmSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/germplasm/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/germplasm/{germplasmSearchResultDbId}"
                    },
                    "requires": [
                        "germplasmSearchResultDbId"
                    ]
                }
            ],
            "name": "Germplasm"
        },
        {
            "description": "Information about Germplasm Attributes",
            "item": [
                {
                    "description": "List available attributes.",
                    "endpoint": "/attributes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributes/getAttributesResponse",
                                "GetValue:/result/data/0/attributeDbId:attributeDbId0",
                                "GetValue:/result/data/1/attributeDbId:attributeDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes"
                    },
                    "requires": []
                },
                {
                    "description": "List all available attribute categories.",
                    "endpoint": "/attributes/categories",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributes/getAttributesCategoriesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes/categories",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes/categories"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details for a specific Germplasm Attribute",
                    "endpoint": "/attributes/{attributeDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributes/getAttributesAttributedbidResponse",
                                "IsEqual:/result/attributeDbId:attributeDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes/{attributeDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes/{attributeDbId0}"
                    },
                    "requires": [
                        "attributeDbId0"
                    ]
                },
                {
                    "description": "Get the details for a specific Germplasm Attribute",
                    "endpoint": "/attributes/{attributeDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributes/getAttributesAttributedbidResponse",
                                "IsEqual:/result/attributeDbId:attributeDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributes/{attributeDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributes/{attributeDbId1}"
                    },
                    "requires": [
                        "attributeDbId1"
                    ]
                },
                {
                    "description": "Create new Germplasm Attributes",
                    "endpoint": "/attributes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributes/postAttributesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /attributes",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/attributes"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Germplasm Attribute",
                    "endpoint": "/attributes/{attributeDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributes/putAttributesAttributedbidResponse",
                                "IsEqual:/result/attributeDbId:attributeDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /attributes/{attributeDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/attributes/{attributeDbId0}"
                    },
                    "requires": [
                        "attributeDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for Germplasm `Attributes`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/attributes/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/attributes",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/GermplasmAttributes/postSearchAttributesResponse:attributesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/attributes",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/attributes"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a Germplasm `Attributes` search request <br/>\nClients should submit a search request using the corresponding `POST /search/attributes` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/attributes/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/GermplasmAttributes/getSearchAttributesSearchresultsdbidResponse:attributesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/attributes/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/attributes/{attributesSearchResultDbId}"
                    },
                    "requires": [
                        "attributesSearchResultDbId"
                    ]
                }
            ],
            "name": "Germplasm Attributes"
        },
        {
            "description": "Information about Germplasm Attribute Values",
            "item": [
                {
                    "description": "Get the Germplasm Attribute Values",
                    "endpoint": "/attributevalues",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributeValues/getAttributevaluesResponse",
                                "GetValue:/result/data/0/attributeValueDbId:attributeValueDbId0",
                                "GetValue:/result/data/1/attributeValueDbId:attributeValueDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributevalues",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributevalues"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details for a specific Germplasm Attribute",
                    "endpoint": "/attributevalues/{attributeValueDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributeValues/getAttributevaluesAttributevaluedbidResponse",
                                "IsEqual:/result/attributeValueDbId:attributeValueDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributevalues/{attributeValueDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributevalues/{attributeValueDbId0}"
                    },
                    "requires": [
                        "attributeValueDbId0"
                    ]
                },
                {
                    "description": "Get the details for a specific Germplasm Attribute",
                    "endpoint": "/attributevalues/{attributeValueDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributeValues/getAttributevaluesAttributevaluedbidResponse",
                                "IsEqual:/result/attributeValueDbId:attributeValueDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /attributevalues/{attributeValueDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/attributevalues/{attributeValueDbId1}"
                    },
                    "requires": [
                        "attributeValueDbId1"
                    ]
                },
                {
                    "description": "Create new Germplasm Attribute Values",
                    "endpoint": "/attributevalues",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributeValues/postAttributevaluesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /attributevalues",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/attributevalues"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Germplasm Attribute Value",
                    "endpoint": "/attributevalues/{attributeValueDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GermplasmAttributeValues/putAttributevaluesAttributevaluedbidResponse",
                                "IsEqual:/result/attributeValueDbId:attributeValueDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /attributevalues/{attributeValueDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/attributevalues/{attributeValueDbId0}"
                    },
                    "requires": [
                        "attributeValueDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for Germplasm `AttributeValues`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/attributevalues/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/attributevalues",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/GermplasmAttributeValues/postSearchAttributevaluesResponse:attributevaluesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/attributevalues",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/attributevalues"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a Germplasm `AttributeValues` search request <br/>\nClients should submit a search request using the corresponding `POST /search/attributevalues` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/attributevalues/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/GermplasmAttributeValues/getSearchAttributevaluesSearchresultsdbidResponse:attributevaluesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/attributevalues/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/attributevalues/{attributevaluesSearchResultDbId}"
                    },
                    "requires": [
                        "attributevaluesSearchResultDbId"
                    ]
                }
            ],
            "name": "Germplasm Attribute Values"
        },
        {
            "description": "Information about Crossing Projects",
            "item": [
                {
                    "description": "Get a filtered list of Crossing Projects.",
                    "endpoint": "/crossingprojects",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CrossingProjects/getCrossingprojectsResponse",
                                "GetValue:/result/data/0/crossingProjectDbId:crossingProjectDbId0",
                                "GetValue:/result/data/1/crossingProjectDbId:crossingProjectDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /crossingprojects",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/crossingprojects"
                    },
                    "requires": []
                },
                {
                    "description": "Get a filtered list of Crossing Projects.",
                    "endpoint": "/crossingprojects/{crossingProjectDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CrossingProjects/getCrossingprojectsCrossingprojectdbidResponse",
                                "IsEqual:/result/crossingProjectDbId:crossingProjectDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /crossingprojects/{crossingProjectDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/crossingprojects/{crossingProjectDbId0}"
                    },
                    "requires": [
                        "crossingProjectDbId0"
                    ]
                },
                {
                    "description": "Get a filtered list of Crossing Projects.",
                    "endpoint": "/crossingprojects/{crossingProjectDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CrossingProjects/getCrossingprojectsCrossingprojectdbidResponse",
                                "IsEqual:/result/crossingProjectDbId:crossingProjectDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /crossingprojects/{crossingProjectDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/crossingprojects/{crossingProjectDbId1}"
                    },
                    "requires": [
                        "crossingProjectDbId1"
                    ]
                },
                {
                    "description": "Create new Crossing Project entities on this server",
                    "endpoint": "/crossingprojects",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CrossingProjects/postCrossingprojectsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /crossingprojects",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/crossingprojects"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Crossing Project entity on this server",
                    "endpoint": "/crossingprojects/{crossingProjectDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CrossingProjects/putCrossingprojectsCrossingprojectdbidResponse",
                                "IsEqual:/result/crossingProjectDbId:crossingProjectDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /crossingprojects/{crossingProjectDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/crossingprojects/{crossingProjectDbId0}"
                    },
                    "requires": [
                        "crossingProjectDbId0"
                    ]
                }
            ],
            "name": "Crossing Projects"
        },
        {
            "description": "Information about Crosses",
            "item": [
                {
                    "description": "Get a filtered list of Cross entities.",
                    "endpoint": "/crosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Crosses/getCrossesResponse",
                                "GetValue:/result/data/0/crossDbId:crossDbId0",
                                "GetValue:/result/data/1/crossDbId:crossDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /crosses",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/crosses"
                    },
                    "requires": []
                },
                {
                    "description": "Get a filtered list of Planned Cross entities.",
                    "endpoint": "/plannedcrosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Crosses/getPlannedcrossesResponse",
                                "GetValue:/result/data/0/plannedCrossDbId:plannedCrossDbId0",
                                "GetValue:/result/data/1/plannedCrossDbId:plannedCrossDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /plannedcrosses",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/plannedcrosses"
                    },
                    "requires": []
                },
                {
                    "description": "Create new Cross entities on this server",
                    "endpoint": "/crosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Crosses/postCrossesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /crosses",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/crosses"
                    },
                    "requires": []
                },
                {
                    "description": "Create new Planned Cross entities on this server",
                    "endpoint": "/plannedcrosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Crosses/postPlannedcrossesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /plannedcrosses",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/plannedcrosses"
                    },
                    "requires": []
                },
                {
                    "description": "Update existing Cross entities on this server",
                    "endpoint": "/crosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Crosses/putCrossesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /crosses",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/crosses"
                    },
                    "requires": []
                },
                {
                    "description": "Update existing Planned Cross entities on this server",
                    "endpoint": "/plannedcrosses",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Crosses/putPlannedcrossesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /plannedcrosses",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/plannedcrosses"
                    },
                    "requires": []
                }
            ],
            "name": "Crosses"
        },
        {
            "description": "Information about Seed Lots",
            "item": [
                {
                    "description": "Get a filtered list of Seed Lot descriptions available in a system.",
                    "endpoint": "/seedlots",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/SeedLots/getSeedlotsResponse",
                                "GetValue:/result/data/0/seedLotDbId:seedLotDbId0",
                                "GetValue:/result/data/1/seedLotDbId:seedLotDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots"
                    },
                    "requires": []
                },
                {
                    "description": "Get a filtered list of Seed Lot Transactions",
                    "endpoint": "/seedlots/transactions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/SeedLots/getSeedlotsTransactionsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots/transactions",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots/transactions"
                    },
                    "requires": []
                },
                {
                    "description": "Get a specific Seed Lot by seedLotDbId",
                    "endpoint": "/seedlots/{seedLotDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/SeedLots/getSeedlotsSeedlotdbidResponse",
                                "IsEqual:/result/seedLotDbId:seedLotDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots/{seedLotDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots/{seedLotDbId0}"
                    },
                    "requires": [
                        "seedLotDbId0"
                    ]
                },
                {
                    "description": "Get a specific Seed Lot by seedLotDbId",
                    "endpoint": "/seedlots/{seedLotDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/SeedLots/getSeedlotsSeedlotdbidResponse",
                                "IsEqual:/result/seedLotDbId:seedLotDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots/{seedLotDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots/{seedLotDbId1}"
                    },
                    "requires": [
                        "seedLotDbId1"
                    ]
                },
                {
                    "description": "Get all Transactions related to a specific Seed Lot",
                    "endpoint": "/seedlots/{seedLotDbId}/transactions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/SeedLots/getSeedlotsSeedlotdbidTransactionsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /seedlots/{seedLotDbId}/transactions",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/seedlots/{seedLotDbId0}/transactions"
                    },
                    "requires": [
                        "seedLotDbId0"
                    ]
                },
                {
                    "description": "Add new Seed Lot descriptions to a server",
                    "endpoint": "/seedlots",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/SeedLots/postSeedlotsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /seedlots",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/seedlots"
                    },
                    "requires": []
                },
                {
                    "description": "Add new Seed Lot Transaction to be recorded",
                    "endpoint": "/seedlots/transactions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/SeedLots/postSeedlotsTransactionsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /seedlots/transactions",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/seedlots/transactions"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Seed Lot",
                    "endpoint": "/seedlots/{seedLotDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/SeedLots/putSeedlotsSeedlotdbidResponse",
                                "IsEqual:/result/seedLotDbId:seedLotDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /seedlots/{seedLotDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/seedlots/{seedLotDbId0}"
                    },
                    "requires": [
                        "seedLotDbId0"
                    ]
                }
            ],
            "name": "Seed Lots"
        },
        {
            "description": "Information about Observation Units",
            "item": [
                {
                    "description": "Call to retrieve the list of supported observation levels. \n\nObservation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\nThe values are used to supply the `observationLevel` parameter in the observation unit details call.\n      \nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>.",
                    "endpoint": "/observationlevels",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationUnits/getObservationlevelsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationlevels",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationlevels"
                    },
                    "requires": []
                },
                {
                    "description": "Get a filtered set of Observation Units",
                    "endpoint": "/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationUnits/getObservationunitsResponse",
                                "GetValue:/result/data/0/observationUnitDbId:observationUnitDbId0",
                                "GetValue:/result/data/1/observationUnitDbId:observationUnitDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationunits",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific Observation Unit",
                    "endpoint": "/observationunits/{observationUnitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationUnits/getObservationunitsObservationunitdbidResponse",
                                "IsEqual:/result/observationUnitDbId:observationUnitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationunits/{observationUnitDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationunits/{observationUnitDbId0}"
                    },
                    "requires": [
                        "observationUnitDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific Observation Unit",
                    "endpoint": "/observationunits/{observationUnitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationUnits/getObservationunitsObservationunitdbidResponse",
                                "IsEqual:/result/observationUnitDbId:observationUnitDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationunits/{observationUnitDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationunits/{observationUnitDbId1}"
                    },
                    "requires": [
                        "observationUnitDbId1"
                    ]
                },
                {
                    "description": "Add new Observation Units",
                    "endpoint": "/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationUnits/postObservationunitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /observationunits",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Update a set of Observation Units \n\nNote - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly to JSON. ",
                    "endpoint": "/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationUnits/putObservationunitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /observationunits",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Observation Units",
                    "endpoint": "/observationunits/{observationUnitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationUnits/putObservationunitsObservationunitdbidResponse",
                                "IsEqual:/result/observationUnitDbId:observationUnitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /observationunits/{observationUnitDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/observationunits/{observationUnitDbId0}"
                    },
                    "requires": [
                        "observationUnitDbId0"
                    ]
                },
                {
                    "description": "<p>This service is designed to retrieve a table for observation values as a matrix of Observation Units and Observation Variables.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> ",
                    "endpoint": "/observationunits/table",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationUnits/getObservationunitsTableResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observationunits/table",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observationunits/table"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for `ObservationUnits`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationunits/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/observationunits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/ObservationUnits/postSearchObservationunitsResponse:observationunitsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/observationunits",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/observationunits"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `ObservationUnits` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observationunits` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/observationunits/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/ObservationUnits/getSearchObservationunitsSearchresultsdbidResponse:observationunitsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/observationunits/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/observationunits/{observationunitsSearchResultDbId}"
                    },
                    "requires": [
                        "observationunitsSearchResultDbId"
                    ]
                }
            ],
            "name": "Observation Units"
        },
        {
            "description": "Information about Observations",
            "item": [
                {
                    "description": "Retrieve all observations where there are measurements for the given observation variables. \n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm ",
                    "endpoint": "/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Observations/getObservationsResponse",
                                "GetValue:/result/data/0/observationDbId:observationDbId0",
                                "GetValue:/result/data/1/observationDbId:observationDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observations",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observations"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific Observations\n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm",
                    "endpoint": "/observations/{observationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Observations/getObservationsObservationdbidResponse",
                                "IsEqual:/result/observationDbId:observationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observations/{observationDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observations/{observationDbId0}"
                    },
                    "requires": [
                        "observationDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific Observations\n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm",
                    "endpoint": "/observations/{observationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Observations/getObservationsObservationdbidResponse",
                                "IsEqual:/result/observationDbId:observationDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observations/{observationDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observations/{observationDbId1}"
                    },
                    "requires": [
                        "observationDbId1"
                    ]
                },
                {
                    "description": "Submit a delete request for `Observations`",
                    "endpoint": "/delete/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Observations/postDeleteObservationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /delete/observations",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/delete/observations"
                    },
                    "requires": []
                },
                {
                    "description": "Add new Observation entities",
                    "endpoint": "/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Observations/postObservationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /observations",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/observations"
                    },
                    "requires": []
                },
                {
                    "description": "Update multiple Observation entities simultaneously with a single call \n\nInclude as many `observationDbIds` in the request as needed. \n\nNote - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly from JSON. ",
                    "endpoint": "/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Observations/putObservationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /observations",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/observations"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Observation",
                    "endpoint": "/observations/{observationDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Observations/putObservationsObservationdbidResponse",
                                "IsEqual:/result/observationDbId:observationDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /observations/{observationDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/observations/{observationDbId0}"
                    },
                    "requires": [
                        "observationDbId0"
                    ]
                },
                {
                    "description": "<p>This service is designed to retrieve a table of time dependant observation values as a matrix of Observation Units and Observation Variables.\nThis is also sometimes called a Time Series. This service takes the \"Sparse Table\" approach for representing this time dependant data.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> ",
                    "endpoint": "/observations/table",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Observations/getObservationsTableResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /observations/table",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/observations/table"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for `Observations`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observations/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/observations",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Observations/postSearchObservationsResponse:observationsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/observations",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/observations"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Observations` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observations` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/observations/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Observations/getSearchObservationsSearchresultsdbidResponse:observationsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/observations/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/observations/{observationsSearchResultDbId}"
                    },
                    "requires": [
                        "observationsSearchResultDbId"
                    ]
                }
            ],
            "name": "Observations"
        },
        {
            "description": "Information about Images",
            "item": [
                {
                    "description": "Get filtered set of image metadata\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for \nretrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s.",
                    "endpoint": "/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Images/getImagesResponse",
                                "GetValue:/result/data/0/imageDbId:imageDbId0",
                                "GetValue:/result/data/1/imageDbId:imageDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /images",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/images"
                    },
                    "requires": []
                },
                {
                    "description": "Get one image metadata object\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for \nretrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s.",
                    "endpoint": "/images/{imageDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Images/getImagesImagedbidResponse",
                                "IsEqual:/result/imageDbId:imageDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /images/{imageDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/images/{imageDbId0}"
                    },
                    "requires": [
                        "imageDbId0"
                    ]
                },
                {
                    "description": "Get one image metadata object\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for \nretrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s.",
                    "endpoint": "/images/{imageDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Images/getImagesImagedbidResponse",
                                "IsEqual:/result/imageDbId:imageDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /images/{imageDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/images/{imageDbId1}"
                    },
                    "requires": [
                        "imageDbId1"
                    ]
                },
                {
                    "description": "Submit a delete request for `Images`",
                    "endpoint": "/delete/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Images/postDeleteImagesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /delete/images",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/delete/images"
                    },
                    "requires": []
                },
                {
                    "description": "Create new image metadata records\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /images/{imageDbId}/imagecontent' for full image upload capability\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving \nthe image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or \nontology references, or full ontology URI's.\n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons.\n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.\n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the \nimage content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/Image_Upload",
                    "endpoint": "/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Images/postImagesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /images",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/images"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing image metadata record\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /images/{imageDbId}/imagecontent' for full image update capability\n\n- A server may choose to modify the image metadata object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" as an \nabsolute path for retrieving the image, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or \nontology references, or full ontology URI's. \n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons. \n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the \nimage content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/Image_Upload",
                    "endpoint": "/images/{imageDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Images/putImagesImagedbidResponse",
                                "IsEqual:/result/imageDbId:imageDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /images/{imageDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/images/{imageDbId0}"
                    },
                    "requires": [
                        "imageDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `XXEntitiesXX`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/XXEntitiesXX/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>\n<br/>\nImage Implementation Notes<br/>\n- `imageURL` should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.<br/>\n- `descriptiveOntologyTerm` can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.<br/>",
                    "endpoint": "/search/images",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Images/postSearchImagesResponse:imagesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/images",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/images"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Images` search request <br/>\nClients should submit a search request using the corresponding `POST /search/images` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>\n<br/>\nImage Implementation Notes<br/>\n- `imageURL` should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.<br/>\n- `descriptiveOntologyTerm` can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.<br/>",
                    "endpoint": "/search/images/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Images/getSearchImagesSearchresultsdbidResponse:imagesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/images/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/images/{imagesSearchResultDbId}"
                    },
                    "requires": [
                        "imagesSearchResultDbId"
                    ]
                }
            ],
            "name": "Images"
        },
        {
            "description": "Information about Observation Variables",
            "item": [
                {
                    "description": "Call to retrieve a list of observationVariables available in the system.",
                    "endpoint": "/variables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationVariables/getVariablesResponse",
                                "GetValue:/result/data/0/observationVariableDbId:observationVariableDbId0",
                                "GetValue:/result/data/1/observationVariableDbId:observationVariableDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variables",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variables"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve variable details",
                    "endpoint": "/variables/{observationVariableDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationVariables/getVariablesObservationvariabledbidResponse",
                                "IsEqual:/result/observationVariableDbId:observationVariableDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variables/{observationVariableDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variables/{observationVariableDbId0}"
                    },
                    "requires": [
                        "observationVariableDbId0"
                    ]
                },
                {
                    "description": "Retrieve variable details",
                    "endpoint": "/variables/{observationVariableDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationVariables/getVariablesObservationvariabledbidResponse",
                                "IsEqual:/result/observationVariableDbId:observationVariableDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variables/{observationVariableDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variables/{observationVariableDbId1}"
                    },
                    "requires": [
                        "observationVariableDbId1"
                    ]
                },
                {
                    "description": "Add new Observation Variables to the system.",
                    "endpoint": "/variables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationVariables/postVariablesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /variables",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/variables"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing Observation Variable",
                    "endpoint": "/variables/{observationVariableDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ObservationVariables/putVariablesObservationvariabledbidResponse",
                                "IsEqual:/result/observationVariableDbId:observationVariableDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /variables/{observationVariableDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/variables/{observationVariableDbId0}"
                    },
                    "requires": [
                        "observationVariableDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for Observation `Variables`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variables/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/variables",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/ObservationVariables/postSearchVariablesResponse:variablesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/variables",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/variables"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a Observation `variables` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variables` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/variables/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/ObservationVariables/getSearchVariablesSearchresultsdbidResponse:variablesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/variables/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/variables/{variablesSearchResultDbId}"
                    },
                    "requires": [
                        "variablesSearchResultDbId"
                    ]
                }
            ],
            "name": "Observation Variables"
        },
        {
            "description": "Information about Traits",
            "item": [
                {
                    "description": "Call to retrieve a list of traits available in the system and their associated variables.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'",
                    "endpoint": "/traits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Traits/getTraitsResponse",
                                "GetValue:/result/data/0/traitDbId:traitDbId0",
                                "GetValue:/result/data/1/traitDbId:traitDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /traits",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/traits"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve the details of a single trait\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/traits/{traitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Traits/getTraitsTraitdbidResponse",
                                "IsEqual:/result/traitDbId:traitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /traits/{traitDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/traits/{traitDbId0}"
                    },
                    "requires": [
                        "traitDbId0"
                    ]
                },
                {
                    "description": "Retrieve the details of a single trait\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/traits/{traitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Traits/getTraitsTraitdbidResponse",
                                "IsEqual:/result/traitDbId:traitDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /traits/{traitDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/traits/{traitDbId1}"
                    },
                    "requires": [
                        "traitDbId1"
                    ]
                },
                {
                    "description": "Create new trait objects in the database",
                    "endpoint": "/traits",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Traits/postTraitsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /traits",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/traits"
                    },
                    "requires": []
                },
                {
                    "description": "Update an existing trait",
                    "endpoint": "/traits/{traitDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Traits/putTraitsTraitdbidResponse",
                                "IsEqual:/result/traitDbId:traitDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /traits/{traitDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/traits/{traitDbId0}"
                    },
                    "requires": [
                        "traitDbId0"
                    ]
                }
            ],
            "name": "Traits"
        },
        {
            "description": "Information about Methods",
            "item": [
                {
                    "description": "Returns a list of Methods available on a server.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'",
                    "endpoint": "/methods",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Methods/getMethodsResponse",
                                "GetValue:/result/data/0/methodDbId:methodDbId0",
                                "GetValue:/result/data/1/methodDbId:methodDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /methods",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/methods"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve details about a specific method\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/methods/{methodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Methods/getMethodsMethoddbidResponse",
                                "IsEqual:/result/methodDbId:methodDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /methods/{methodDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/methods/{methodDbId0}"
                    },
                    "requires": [
                        "methodDbId0"
                    ]
                },
                {
                    "description": "Retrieve details about a specific method\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/methods/{methodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Methods/getMethodsMethoddbidResponse",
                                "IsEqual:/result/methodDbId:methodDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /methods/{methodDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/methods/{methodDbId1}"
                    },
                    "requires": [
                        "methodDbId1"
                    ]
                },
                {
                    "description": "Create new method objects in the database",
                    "endpoint": "/methods",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Methods/postMethodsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /methods",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/methods"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of an existing method",
                    "endpoint": "/methods/{methodDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Methods/putMethodsMethoddbidResponse",
                                "IsEqual:/result/methodDbId:methodDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /methods/{methodDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/methods/{methodDbId0}"
                    },
                    "requires": [
                        "methodDbId0"
                    ]
                }
            ],
            "name": "Methods"
        },
        {
            "description": "Information about Scales",
            "item": [
                {
                    "description": "Returns a list of Scales available on a server.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/scales",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Scales/getScalesResponse",
                                "GetValue:/result/data/0/scaleDbId:scaleDbId0",
                                "GetValue:/result/data/1/scaleDbId:scaleDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /scales",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/scales"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve details about a specific scale\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/scales/{scaleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Scales/getScalesScaledbidResponse",
                                "IsEqual:/result/scaleDbId:scaleDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /scales/{scaleDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/scales/{scaleDbId0}"
                    },
                    "requires": [
                        "scaleDbId0"
                    ]
                },
                {
                    "description": "Retrieve details about a specific scale\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
                    "endpoint": "/scales/{scaleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Scales/getScalesScaledbidResponse",
                                "IsEqual:/result/scaleDbId:scaleDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /scales/{scaleDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/scales/{scaleDbId1}"
                    },
                    "requires": [
                        "scaleDbId1"
                    ]
                },
                {
                    "description": "Create new scale objects in the database",
                    "endpoint": "/scales",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Scales/postScalesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /scales",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/scales"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of an existing scale",
                    "endpoint": "/scales/{scaleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Scales/putScalesScaledbidResponse",
                                "IsEqual:/result/scaleDbId:scaleDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /scales/{scaleDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/scales/{scaleDbId0}"
                    },
                    "requires": [
                        "scaleDbId0"
                    ]
                }
            ],
            "name": "Scales"
        },
        {
            "description": "Information about Ontologies",
            "item": [
                {
                    "description": "Retrieve a list of ontologies available in the system. \nEach Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.",
                    "endpoint": "/ontologies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Ontologies/getOntologiesResponse",
                                "GetValue:/result/data/0/ontologyDbId:ontologyDbId0",
                                "GetValue:/result/data/1/ontologyDbId:ontologyDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /ontologies",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/ontologies"
                    },
                    "requires": []
                },
                {
                    "description": "Use this endpoint to retrieve a specific Ontology record by its ontologyDbId. \nEach Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.",
                    "endpoint": "/ontologies/{ontologyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Ontologies/getOntologiesOntologydbidResponse",
                                "IsEqual:/result/ontologyDbId:ontologyDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /ontologies/{ontologyDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/ontologies/{ontologyDbId0}"
                    },
                    "requires": [
                        "ontologyDbId0"
                    ]
                },
                {
                    "description": "Use this endpoint to retrieve a specific Ontology record by its ontologyDbId. \nEach Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.",
                    "endpoint": "/ontologies/{ontologyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Ontologies/getOntologiesOntologydbidResponse",
                                "IsEqual:/result/ontologyDbId:ontologyDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /ontologies/{ontologyDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/ontologies/{ontologyDbId1}"
                    },
                    "requires": [
                        "ontologyDbId1"
                    ]
                },
                {
                    "description": "Use this endpoint to create a new Ontology record in the database\nEach Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.",
                    "endpoint": "/ontologies",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Ontologies/postOntologiesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /ontologies",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/ontologies"
                    },
                    "requires": []
                },
                {
                    "description": "Use this endpoint to update a specific Ontology record. \nEach Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.",
                    "endpoint": "/ontologies/{ontologyDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Ontologies/putOntologiesOntologydbidResponse",
                                "IsEqual:/result/ontologyDbId:ontologyDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /ontologies/{ontologyDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/ontologies/{ontologyDbId0}"
                    },
                    "requires": [
                        "ontologyDbId0"
                    ]
                }
            ],
            "name": "Ontologies"
        },
        {
            "description": "Information about Events",
            "item": [
                {
                    "description": "Get list of events",
                    "endpoint": "/events",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Events/getEventsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /events",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/events"
                    },
                    "requires": []
                }
            ],
            "name": "Events"
        },
        {
            "description": "Information about Genome Maps",
            "item": [
                {
                    "description": "Get list of maps",
                    "endpoint": "/maps",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GenomeMaps/getMapsResponse",
                                "GetValue:/result/data/0/mapDbId:mapDbId0",
                                "GetValue:/result/data/1/mapDbId:mapDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps"
                    },
                    "requires": []
                },
                {
                    "description": "Provides the number of markers on each linkageGroup and the max position on the linkageGroup",
                    "endpoint": "/maps/{mapDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GenomeMaps/getMapsMapdbidResponse",
                                "IsEqual:/result/mapDbId:mapDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId0}"
                    },
                    "requires": [
                        "mapDbId0"
                    ]
                },
                {
                    "description": "Provides the number of markers on each linkageGroup and the max position on the linkageGroup",
                    "endpoint": "/maps/{mapDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GenomeMaps/getMapsMapdbidResponse",
                                "IsEqual:/result/mapDbId:mapDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId1}"
                    },
                    "requires": [
                        "mapDbId1"
                    ]
                },
                {
                    "description": "Get the Linkage Groups of a specific Genomic Map. A Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.",
                    "endpoint": "/maps/{mapDbId}/linkagegroups",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GenomeMaps/getMapsMapdbidLinkagegroupsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /maps/{mapDbId}/linkagegroups",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/maps/{mapDbId0}/linkagegroups"
                    },
                    "requires": [
                        "mapDbId0"
                    ]
                },
                {
                    "description": "Get marker position information, based on Map, Linkage Group, and Marker ID",
                    "endpoint": "/markerpositions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/GenomeMaps/getMarkerpositionsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /markerpositions",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/markerpositions"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for `MarkerPositions`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/markerpositions/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/markerpositions",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/GenomeMaps/postSearchMarkerpositionsResponse:markerpositionsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/markerpositions",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/markerpositions"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `MarkerPositions` search request <br/>\nClients should submit a search request using the corresponding `POST /search/markerpositions` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/markerpositions/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/GenomeMaps/getSearchMarkerpositionsSearchresultsdbidResponse:markerpositionsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/markerpositions/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/markerpositions/{markerpositionsSearchResultDbId}"
                    },
                    "requires": [
                        "markerpositionsSearchResultDbId"
                    ]
                }
            ],
            "name": "Genome Maps"
        },
        {
            "description": "Information about Pedigree",
            "item": [
                {
                    "description": "Get a filtered list of pedigree nodes which represent a subset of a pedigree tree",
                    "endpoint": "/pedigree",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Pedigree/getPedigreeResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /pedigree",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/pedigree"
                    },
                    "requires": []
                },
                {
                    "description": "Send a list of new pedigree nodes to a server",
                    "endpoint": "/pedigree",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Pedigree/postPedigreeResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /pedigree",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/pedigree"
                    },
                    "requires": []
                },
                {
                    "description": "Send a list of pedigree nodes to update existing information on a server",
                    "endpoint": "/pedigree",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Pedigree/putPedigreeResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /pedigree",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/pedigree"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for `Pedigree`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/pedigree",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Pedigree/postSearchPedigreeResponse:pedigreeSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/pedigree",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/pedigree"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Pedigree` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasm` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/pedigree/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Pedigree/getSearchPedigreeSearchresultsdbidResponse:pedigreeSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/pedigree/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/pedigree/{pedigreeSearchResultDbId}"
                    },
                    "requires": [
                        "pedigreeSearchResultDbId"
                    ]
                }
            ],
            "name": "Pedigree"
        },
        {
            "description": "Information about Plates",
            "item": [
                {
                    "description": "Get a filtered list of `Plates`. Each `Plate` is a collection of `Samples` that are physically grouped together.",
                    "endpoint": "/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Plates/getPlatesResponse",
                                "GetValue:/result/data/0/plateDbId:plateDbId0",
                                "GetValue:/result/data/1/plateDbId:plateDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /plates",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/plates"
                    },
                    "requires": []
                },
                {
                    "description": "Get the details of a specific `Plate`. Each `Plate` is a collection of `Samples` that are physically grouped together.",
                    "endpoint": "/plates/{plateDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Plates/getPlatesPlatedbidResponse",
                                "IsEqual:/result/plateDbId:plateDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /plates/{plateDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/plates/{plateDbId0}"
                    },
                    "requires": [
                        "plateDbId0"
                    ]
                },
                {
                    "description": "Get the details of a specific `Plate`. Each `Plate` is a collection of `Samples` that are physically grouped together.",
                    "endpoint": "/plates/{plateDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Plates/getPlatesPlatedbidResponse",
                                "IsEqual:/result/plateDbId:plateDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /plates/{plateDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/plates/{plateDbId1}"
                    },
                    "requires": [
                        "plateDbId1"
                    ]
                },
                {
                    "description": "Submit new Plate entities to the server",
                    "endpoint": "/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Plates/postPlatesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /plates",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/plates"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of existing Plates",
                    "endpoint": "/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Plates/putPlatesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /plates",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/plates"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for `Plates`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/plates/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Plates/postSearchPlatesResponse:platesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/plates",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/plates"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Plates` search request <br/>\nClients should submit a search request using the corresponding `POST /search/plates` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/plates/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Plates/getSearchPlatesSearchresultsdbidResponse:platesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/plates/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/plates/{platesSearchResultDbId}"
                    },
                    "requires": [
                        "platesSearchResultDbId"
                    ]
                }
            ],
            "name": "Plates"
        },
        {
            "description": "Information about Samples",
            "item": [
                {
                    "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.",
                    "endpoint": "/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Samples/getSamplesResponse",
                                "GetValue:/result/data/0/sampleDbId:sampleDbId0",
                                "GetValue:/result/data/1/sampleDbId:sampleDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /samples",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Used to retrieve the details of a single Sample from a Sample Tracking system.",
                    "endpoint": "/samples/{sampleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Samples/getSamplesSampledbidResponse",
                                "IsEqual:/result/sampleDbId:sampleDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /samples/{sampleDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/samples/{sampleDbId0}"
                    },
                    "requires": [
                        "sampleDbId0"
                    ]
                },
                {
                    "description": "Used to retrieve the details of a single Sample from a Sample Tracking system.",
                    "endpoint": "/samples/{sampleDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Samples/getSamplesSampledbidResponse",
                                "IsEqual:/result/sampleDbId:sampleDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /samples/{sampleDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/samples/{sampleDbId1}"
                    },
                    "requires": [
                        "sampleDbId1"
                    ]
                },
                {
                    "description": "Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response.",
                    "endpoint": "/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Samples/postSamplesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /samples",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[{}]"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Update the details of existing Samples",
                    "endpoint": "/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Samples/putSamplesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /samples",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for `Samples`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/samples/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/samples",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Samples/postSearchSamplesResponse:samplesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/samples",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/samples"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Samples` search request <br/>\nClients should submit a search request using the corresponding `POST /search/samples` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/samples/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Samples/getSearchSamplesSearchresultsdbidResponse:samplesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/samples/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/samples/{samplesSearchResultDbId}"
                    },
                    "requires": [
                        "samplesSearchResultDbId"
                    ]
                }
            ],
            "name": "Samples"
        },
        {
            "description": "Information about Variant Sets",
            "item": [
                {
                    "description": "Will return a filtered list of `VariantSet`.",
                    "endpoint": "/variantsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/VariantSets/getVariantsetsResponse",
                                "GetValue:/result/data/0/variantSetDbId:variantSetDbId0",
                                "GetValue:/result/data/1/variantSetDbId:variantSetDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets"
                    },
                    "requires": []
                },
                {
                    "description": "This call will return a JSON version of a `VariantSet`.",
                    "endpoint": "/variantsets/{variantSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/VariantSets/getVariantsetsVariantsetdbidResponse",
                                "IsEqual:/result/variantSetDbId:variantSetDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId0}"
                    },
                    "requires": [
                        "variantSetDbId0"
                    ]
                },
                {
                    "description": "This call will return a JSON version of a `VariantSet`.",
                    "endpoint": "/variantsets/{variantSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/VariantSets/getVariantsetsVariantsetdbidResponse",
                                "IsEqual:/result/variantSetDbId:variantSetDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId1}"
                    },
                    "requires": [
                        "variantSetDbId1"
                    ]
                },
                {
                    "description": "Gets a list of `Calls` associated with a `VariantSet`.",
                    "endpoint": "/variantsets/{variantSetDbId}/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/VariantSets/getVariantsetsVariantsetdbidCallsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId}/calls",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId0}/calls"
                    },
                    "requires": [
                        "variantSetDbId0"
                    ]
                },
                {
                    "description": "Gets a list of `CallSets` associated with a `VariantSet`.",
                    "endpoint": "/variantsets/{variantSetDbId}/callsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/VariantSets/getVariantsetsVariantsetdbidCallsetsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId}/callsets",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId0}/callsets"
                    },
                    "requires": [
                        "variantSetDbId0"
                    ]
                },
                {
                    "description": "This call will return an array of `Variants`.",
                    "endpoint": "/variantsets/{variantSetDbId}/variants",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/VariantSets/getVariantsetsVariantsetdbidVariantsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variantsets/{variantSetDbId}/variants",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variantsets/{variantSetDbId0}/variants"
                    },
                    "requires": [
                        "variantSetDbId0"
                    ]
                },
                {
                    "description": "Will perform a search for `Calls` which match the search criteria in `variantSetsExtractRequest`. The results of the search will be used to create a new `VariantSet` on the server. The new `VariantSet` will be returned.",
                    "endpoint": "/variantsets/extract",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/VariantSets/postVariantsetsExtractResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /variantsets/extract",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/variantsets/extract"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for `VariantSets`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variantsets/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/variantsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/VariantSets/postSearchVariantsetsResponse:variantsetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/variantsets",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/variantsets"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `VariantSets` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variantsets` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/variantsets/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/VariantSets/getSearchVariantsetsSearchresultsdbidResponse:variantsetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/variantsets/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/variantsets/{variantsetsSearchResultDbId}"
                    },
                    "requires": [
                        "variantsetsSearchResultDbId"
                    ]
                }
            ],
            "name": "Variant Sets"
        },
        {
            "description": "Information about Variants",
            "item": [
                {
                    "description": "Gets a filtered list of `Variants`.",
                    "endpoint": "/variants",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Variants/getVariantsResponse",
                                "GetValue:/result/data/0/variantDbId:variantDbId0",
                                "GetValue:/result/data/1/variantDbId:variantDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variants",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variants"
                    },
                    "requires": []
                },
                {
                    "description": "The endpoint `GET /variants/{id}` will return a JSON version of `Variant`.",
                    "endpoint": "/variants/{variantDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Variants/getVariantsVariantdbidResponse",
                                "IsEqual:/result/variantDbId:variantDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variants/{variantDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variants/{variantDbId0}"
                    },
                    "requires": [
                        "variantDbId0"
                    ]
                },
                {
                    "description": "The endpoint `GET /variants/{id}` will return a JSON version of `Variant`.",
                    "endpoint": "/variants/{variantDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Variants/getVariantsVariantdbidResponse",
                                "IsEqual:/result/variantDbId:variantDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variants/{variantDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variants/{variantDbId1}"
                    },
                    "requires": [
                        "variantDbId1"
                    ]
                },
                {
                    "description": "The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant. `Calls` in this array are implicitly associated with this `Variant`.",
                    "endpoint": "/variants/{variantDbId}/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Variants/getVariantsVariantdbidCallsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /variants/{variantDbId}/calls",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/variants/{variantDbId0}/calls"
                    },
                    "requires": [
                        "variantDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `Variants`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variants/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>\n<br/>\n<strong>NOTE:</strong> This endpoint uses Token based pagination. Please Review the \n<a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Pagination\">Pagination documentation</a> for additional implementation details.",
                    "endpoint": "/search/variants",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Variants/postSearchVariantsResponse:variantsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/variants",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/variants"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Variants` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variants` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>",
                    "endpoint": "/search/variants/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Variants/getSearchVariantsSearchresultsdbidResponse:variantsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/variants/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/variants/{variantsSearchResultDbId}"
                    },
                    "requires": [
                        "variantsSearchResultDbId"
                    ]
                }
            ],
            "name": "Variants"
        },
        {
            "description": "Information about Call Sets",
            "item": [
                {
                    "description": "Gets a filtered list of `CallSet` JSON objects.",
                    "endpoint": "/callsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CallSets/getCallsetsResponse",
                                "GetValue:/result/data/0/callSetDbId:callSetDbId0",
                                "GetValue:/result/data/1/callSetDbId:callSetDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /callsets",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/callsets"
                    },
                    "requires": []
                },
                {
                    "description": "Gets a `CallSet` by ID.",
                    "endpoint": "/callsets/{callSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CallSets/getCallsetsCallsetdbidResponse",
                                "IsEqual:/result/callSetDbId:callSetDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /callsets/{callSetDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/callsets/{callSetDbId0}"
                    },
                    "requires": [
                        "callSetDbId0"
                    ]
                },
                {
                    "description": "Gets a `CallSet` by ID.",
                    "endpoint": "/callsets/{callSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CallSets/getCallsetsCallsetdbidResponse",
                                "IsEqual:/result/callSetDbId:callSetDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /callsets/{callSetDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/callsets/{callSetDbId1}"
                    },
                    "requires": [
                        "callSetDbId1"
                    ]
                },
                {
                    "description": "Gets a list of `Calls` associated with a `CallSet`.",
                    "endpoint": "/callsets/{callSetDbId}/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/CallSets/getCallsetsCallsetdbidCallsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /callsets/{callSetDbId}/calls",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/callsets/{callSetDbId0}/calls"
                    },
                    "requires": [
                        "callSetDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `CallSets` \n<br> Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/callsets/{searchResultsDbId}` to retrieve the results of the search. \n<br> Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/callsets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/CallSets/postSearchCallsetsResponse:callsetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/callsets",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/callsets"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `CallSets` search request \n<br> Clients should submit a search request using the corresponding `POST /search/callsets` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. \n<br>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/callsets/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/CallSets/getSearchCallsetsSearchresultsdbidResponse:callsetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/callsets/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/callsets/{callsetsSearchResultDbId}"
                    },
                    "requires": [
                        "callsetsSearchResultDbId"
                    ]
                }
            ],
            "name": "Call Sets"
        },
        {
            "description": "Information about Calls",
            "item": [
                {
                    "description": "Gets a filtered list of `Call` JSON objects.",
                    "endpoint": "/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Calls/getCallsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /calls",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/calls"
                    },
                    "requires": []
                },
                {
                    "description": "Update existing `Calls` with new genotype value or metadata\n<br/>Implementation Note - \n<br/>A `Call` object does not have a DbId of its own. It is defined by the unique combination of \n`callSetDbId`, `variantDbId`, and `variantSetDbId`. These three fields MUST be present for every \n`call` update request. This endpoint should not allow these fields to be modified for a given \n`call`. Modifying these fields in the database is effectively moving a cell to a different location\nin the genotype matrix. This action is dangerous and can cause data collisions.     ",
                    "endpoint": "/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Calls/putCallsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "PUT /calls",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "[]"
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "{baseurl}/calls"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a search request for `Calls`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/calls/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details. \n<br/>\n<br/>\n<strong>NOTE:</strong> This endpoint uses Token based pagination. Please Review the \n<a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Pagination\">Pagination documentation</a> for additional implementation details.",
                    "endpoint": "/search/calls",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Calls/postSearchCallsResponse:callsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/calls",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/calls"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `Calls` search request <br/>\nClients should submit a search request using the corresponding `POST /search/calls` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>",
                    "endpoint": "/search/calls/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/Calls/getSearchCallsSearchresultsdbidResponse:callsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/calls/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/calls/{callsSearchResultDbId}"
                    },
                    "requires": [
                        "callsSearchResultDbId"
                    ]
                }
            ],
            "name": "Calls"
        },
        {
            "description": "Information about Allele Matrix",
            "item": [
                {
                    "description": "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF file format, \nbut the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, \nwithout having to download the entire genotype file.\n<br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet.    ",
                    "endpoint": "/allelematrix",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/AlleleMatrix/getAllelematrixResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /allelematrix",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/allelematrix"
                    },
                    "requires": []
                },
                {
                    "description": "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF format, but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, without having to download the entire genotype file.\n<br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet. \n<br/>Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. If a server needs more time to process the request, it might respond with a `searchResultsDbId`. Use the corresponding `GET /search/calls/{searchResultsDbId}` to retrieve the results of the search. \n<br/>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/allelematrix",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/AlleleMatrix/postSearchAllelematrixResponse:allelematrixSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/allelematrix",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/allelematrix"
                    },
                    "requires": []
                },
                {
                    "description": "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF format, but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, without having to download the entire genotype file.\n<br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet. \n<br/>Clients should submit a search request using the corresponding `POST /search/allelematrix` endpoint. Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. If a server needs more time to process the request, it might respond with a `searchResultsDbId`. Use this endpoint to retrieve the results of the search. \n<br/>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/allelematrix/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/AlleleMatrix/getSearchAllelematrixSearchresultsdbidResponse:allelematrixSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/allelematrix/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/allelematrix/{allelematrixSearchResultDbId}"
                    },
                    "requires": [
                        "allelematrixSearchResultDbId"
                    ]
                }
            ],
            "name": "Allele Matrix"
        },
        {
            "description": "Information about Reference Sets",
            "item": [
                {
                    "description": "Gets a filtered list of `ReferenceSets`.",
                    "endpoint": "/referencesets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ReferenceSets/getReferencesetsResponse",
                                "GetValue:/result/data/0/referenceSetDbId:referenceSetDbId0",
                                "GetValue:/result/data/1/referenceSetDbId:referenceSetDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /referencesets",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/referencesets"
                    },
                    "requires": []
                },
                {
                    "description": "Gets a `ReferenceSet` by ID.",
                    "endpoint": "/referencesets/{referenceSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ReferenceSets/getReferencesetsReferencesetdbidResponse",
                                "IsEqual:/result/referenceSetDbId:referenceSetDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /referencesets/{referenceSetDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/referencesets/{referenceSetDbId0}"
                    },
                    "requires": [
                        "referenceSetDbId0"
                    ]
                },
                {
                    "description": "Gets a `ReferenceSet` by ID.",
                    "endpoint": "/referencesets/{referenceSetDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/ReferenceSets/getReferencesetsReferencesetdbidResponse",
                                "IsEqual:/result/referenceSetDbId:referenceSetDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /referencesets/{referenceSetDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/referencesets/{referenceSetDbId1}"
                    },
                    "requires": [
                        "referenceSetDbId1"
                    ]
                },
                {
                    "description": "Submit a search request for `ReferenceSets`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/referencesets/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/referencesets",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/ReferenceSets/postSearchReferencesetsResponse:referencesetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/referencesets",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/referencesets"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `ReferenceSets` search request <br/>\nClients should submit a search request using the corresponding `POST /search/referencesets` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/referencesets/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/ReferenceSets/getSearchReferencesetsSearchresultsdbidResponse:referencesetsSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/referencesets/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/referencesets/{referencesetsSearchResultDbId}"
                    },
                    "requires": [
                        "referencesetsSearchResultDbId"
                    ]
                }
            ],
            "name": "Reference Sets"
        },
        {
            "description": "Information about References",
            "item": [
                {
                    "description": "`GET /references` will return a filtered list of `Reference` JSON objects.",
                    "endpoint": "/references",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/References/getReferencesResponse",
                                "GetValue:/result/data/0/referenceDbId:referenceDbId0",
                                "GetValue:/result/data/1/referenceDbId:referenceDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /references",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/references"
                    },
                    "requires": []
                },
                {
                    "description": "`GET /references/{reference_id}` will return a JSON version of\n`Reference`.",
                    "endpoint": "/references/{referenceDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/References/getReferencesReferencedbidResponse",
                                "IsEqual:/result/referenceDbId:referenceDbId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /references/{referenceDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/references/{referenceDbId0}"
                    },
                    "requires": [
                        "referenceDbId0"
                    ]
                },
                {
                    "description": "`GET /references/{reference_id}` will return a JSON version of\n`Reference`.",
                    "endpoint": "/references/{referenceDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/References/getReferencesReferencedbidResponse",
                                "IsEqual:/result/referenceDbId:referenceDbId1"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /references/{referenceDbId} with second DbId",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/references/{referenceDbId1}"
                    },
                    "requires": [
                        "referenceDbId1"
                    ]
                },
                {
                    "description": "Lists `Reference` bases by ID and optional range.",
                    "endpoint": "/references/{referenceDbId}/bases",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/References/getReferencesReferencedbidBasesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /references/{referenceDbId}/bases",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/references/{referenceDbId0}/bases"
                    },
                    "requires": [
                        "referenceDbId0"
                    ]
                },
                {
                    "description": "Submit a search request for `References`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/references/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/references",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/References/postSearchReferencesResponse:referencesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /search/references",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/search/references"
                    },
                    "requires": []
                },
                {
                    "description": "Get the results of a `References` search request <br/>\nClients should submit a search request using the corresponding `POST /search/references` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                    "endpoint": "/search/references/{searchResultsDbId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:202,200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "SearchSchema:/v2.1/References/getSearchReferencesSearchresultsdbidResponse:referencesSearchResultDbId"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /search/references/{searchResultsDbId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/search/references/{referencesSearchResultDbId}"
                    },
                    "requires": [
                        "referencesSearchResultDbId"
                    ]
                }
            ],
            "name": "References"
        },
        {
            "description": "Information about Vendor",
            "item": [
                {
                    "description": "List current available orders",
                    "endpoint": "/vendor/orders",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Vendor/getVendorOrdersResponse",
                                "GetValue:/result/data/0/orderId:orderId0"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders"
                    },
                    "requires": []
                },
                {
                    "description": "Submit a new order to a vendor",
                    "endpoint": "/vendor/orders",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Vendor/postVendorOrdersResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /vendor/orders",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/vendor/orders"
                    },
                    "requires": []
                },
                {
                    "description": "Retrieve the plate and sample details of an order being processed",
                    "endpoint": "/vendor/orders/{orderId}/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Vendor/getVendorOrdersOrderidPlatesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders/{orderId}/plates",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders/{orderId0}/plates"
                    },
                    "requires": [
                        "orderId0"
                    ]
                },
                {
                    "description": "Retrieve the data files generated by the vendors analysis",
                    "endpoint": "/vendor/orders/{orderId}/results",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Vendor/getVendorOrdersOrderidResultsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders/{orderId}/results",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders/{orderId0}/results"
                    },
                    "requires": [
                        "orderId0"
                    ]
                },
                {
                    "description": "Retrieve the current status of an order being processed",
                    "endpoint": "/vendor/orders/{orderId}/status",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Vendor/getVendorOrdersOrderidStatusResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/orders/{orderId}/status",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/orders/{orderId0}/status"
                    },
                    "requires": [
                        "orderId0"
                    ]
                },
                {
                    "description": "Submit a new set of Sample data",
                    "endpoint": "/vendor/plates",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Vendor/postVendorPlatesResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "POST /vendor/plates",
                    "parameters": [
                        {
                            "param": "json",
                            "value": "{}"
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "url": "{baseurl}/vendor/plates"
                    },
                    "requires": []
                },
                {
                    "description": "Get data for a submitted set of plates",
                    "endpoint": "/vendor/plates/{submissionId}",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Vendor/getVendorPlatesSubmissionidResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/plates/{submissionId}",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/plates/{submissionId0}"
                    },
                    "requires": [
                        "submissionId0"
                    ]
                },
                {
                    "description": "Defines the plate format specification for the vendor.",
                    "endpoint": "/vendor/specifications",
                    "event": [
                        {
                            "exec": [
                                "StatusCode:200:breakiffalse",
                                "ContentType:application/json",
                                "Schema:/v2.1/metadata",
                                "Schema:/v2.1/Vendor/getVendorSpecificationsResponse"
                            ],
                            "listen": "test",
                            "type": "text/plain"
                        }
                    ],
                    "name": "GET /vendor/specifications",
                    "parameters": [
                        {
                            "param": "json",
                            "value": ""
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": "{baseurl}/vendor/specifications"
                    },
                    "requires": []
                }
            ],
            "name": "Vendor"
        }
    ]
}